'use client';
import React, { 
  createContext, 
  useContext, 
  useReducer, 
  useEffect, 
  useState, 
  useCallback,
  useMemo,
  memo,
  lazy,
  Suspense
} from 'react';
import { useRouter } from 'next/navigation';
import { 
  Button, 
  Card, 
  CardBody, 
  Input, 
  Select, 
  SelectItem, 
  Textarea, 
  Modal, 
  ModalBody, 
  ModalContent, 
  ModalFooter, 
  ModalHeader,
  Switch,
  Tab,
  Tabs,
  Tooltip,
  Spinner,
  Divider,
  Image,
  Badge,
  Popover,
  PopoverTrigger,
  PopoverContent,
  Progress,
  Chip,
  Avatar,
  Skeleton,
  Kbd,
  Dropdown,
  DropdownTrigger,
  DropdownMenu,
  DropdownItem,
  Table,
  TableHeader,
  TableColumn,
  TableBody,
  TableRow,
  TableCell
} from '@nextui-org/react';
import { 
  DndContext, 
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
  DragEndEvent,
  DragOverlay,
  DragStartEvent
} from '@dnd-kit/core';
import {
  SortableContext,
  sortableKeyboardCoordinates,
  verticalListSortingStrategy,
  arrayMove,
  useSortable
} from '@dnd-kit/sortable';
import { CSS } from '@dnd-kit/utilities';
import { FaSave, FaMobile, FaMagic, FaLock, FaCrown, FaChartLine, FaUndo, FaRedo, FaKeyboard, FaPlus, FaEllipsisV, FaTrash, FaCopy, FaShareAlt, FaGift, FaTrophy, FaCheck, FaUserPlus, FaDollarSign } from 'react-icons/fa';
import { FiExternalLink, FiCopy, FiGlobe, FiDollarSign, FiDownload, FiHelpCircle, FiEdit3, FiUserPlus as FiUserPlusIcon, FiBarChart2, FiShare2, FiActivity } from 'react-icons/fi';
import { MdTextFields, MdImage, MdLink, MdGroup, MdOndemandVideo, MdShoppingCart, MdEmail, MdHorizontalRule, MdStar, MdCalendarToday } from 'react-icons/md';
import { useResizeDetector } from 'react-resize-detector';
import { toast, Toaster } from 'react-hot-toast';
import { v4 as uuidv4 } from 'uuid';
import DOMPurify from 'dompurify';
import { saveAs } from 'file-saver';
import Joyride, { Step, CallBackProps, STATUS } from 'react-joyride';
import { useVirtual } from 'react-virtual';
import { ErrorBoundary } from 'react-error-boundary';
import { useGesture } from '@use-gesture/react';
import { useIntl, IntlProvider } from 'react-intl';
import { Analytics } from '@vercel/analytics/react';
import { debounce } from 'lodash-es';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import { ThemeProvider, useTheme } from 'next-themes';
import QRCode from 'react-qr-code';

// ============== I18N MESSAGES ==============
const messages = {
  en: {
    welcome: "Welcome to my bio!",
    blockAdded: "Block added",
    blockDeleted: "Block deleted",
    templateApplied: "Template applied",
    saveSuccess: "Saved successfully!",
    offlineSave: "Changes saved locally. Will sync when online",
    undo: "Undo completed",
    redo: "Redo completed",
    creditPurchase: "{amount} AI credits purchased!",
    domainVerified: "Domain verified successfully!",
    linkCopied: "Link copied to clipboard!",
    exportSuccess: "Exported as HTML!",
    exportPDFSuccess: "Exported as PDF!",
    exportImageSuccess: "Exported as Image!",
    blockLimit: "Block limit reached ({limit}). Upgrade to add more.",
    premiumBlock: "Upgrade to Pro to use this block",
    saveFailed: "Save failed. Please try again.",
    restoreFailed: "Restore failed",
    paymentFailed: "Failed to initiate payment",
    creditFailed: "Failed to purchase credits",
    verifyFailed: "Domain verification failed",
    offlineVerify: "Cannot verify domain while offline",
    monetization: "Monetization",
    addTipJar: "Add Tip Jar",
    tipJar: "Tip Jar",
    sellProducts: "Sell Products",
    products: "Products",
    upgradeSubscription: "Upgrade Subscription",
    upgrade: "Upgrade",
    purchaseAICredits: "Purchase AI Credits",
    aiCredits: "AI Credits",
    customDomains: "Custom Domains",
    upgradeForCustomDomain: "Upgrade to Pro or Enterprise to use custom domains",
    upgradeToPro: "Upgrade to Pro",
    upgradeNow: "Upgrade Now",
    yourDomain: "Your Domain",
    domainDescription: "Enter your custom domain (without https://)",
    verifyDomain: "Verify & Connect",
    offlineCannotVerify: "Offline - Cannot Verify",
    dnsInstructions: "Add a TXT record with 'biobuilder-verification' in your DNS settings",
    bioLink: "Your Bio Link",
    copyBioLink: "Copy Bio Link",
    export: "Export",
    exportAsHTML: "Export as HTML",
    exportAsPDF: "Export as PDF",
    exportAsImage: "Export as Image",
    keyboardShortcuts: "Keyboard Shortcuts",
    shortcutsDescription: "Work faster with these keyboard shortcuts",
    proTips: "Pro Tips",
    proTip1: "Double-click on blocks to quickly edit content",
    proTip2: "Use Shift+Click to select multiple blocks",
    proTip3: "Press Escape to clear selection",
    proTip4: "Ctrl+Click links to open in new tab",
    errorTitle: "Something went wrong",
    tryAgain: "Try Again",
    savingContent: "Saving your content...",
    saveComplete: "Save complete",
    offlineWarning: "You are currently offline. Changes will be saved locally.",
    onlineStatus: "Back online. Changes will sync now.",
    offlineMode: "You are offline. Changes will be saved locally.",
    undoAction: "Undo last action",
    redoAction: "Redo last action",
    saveChanges: "Save changes",
    duplicateBlock: "Duplicate block",
    deleteBlock: "Delete selected block",
    moveBlockPosition: "Move block position",
    moveBlockQuickly: "Move block quickly",
    createYourBio: "Create Your Bio Page",
    createBioDescription: "Start by adding your first content block or choose from professionally designed templates",
    addFirstBlock: "Add First Block",
    chooseTemplate: "Choose Template",
    createdWithBioBuilder: "Created with BioBuilder",
    draggingBlock: "Dragging block",
    moveToReposition: "Move to reposition",
    performanceInsights: "Performance Insights",
    engagement: "Engagement",
    ctr: "CTR",
    subscribers: "Subscribers",
    revenue: "Revenue",
    viewFullAnalytics: "View Full Analytics",
    templates: "Templates",
    openTemplateGallery: "Open Template Gallery",
    applyMinimalTemplate: "Apply Minimal Template",
    showShortcuts: "Show Keyboard Shortcuts",
    savingInProgress: "Saving in progress",
    saveDraft: "Save Draft",
    publishBio: "Publish Bio",
    supportCreator: "Support Creator",
    purchaseProduct: "Purchase Product",
    upgradePlan: "Upgrade Plan",
    buyAICredits: "Buy AI Credits",
    credits: "credits",
    confirmCreditPurchase: "Confirm credit purchase",
    purchaseNow: "Purchase Now",
    paymentSuccessful: "Payment Successful!",
    cancelPayment: "Cancel Payment",
    cancel: "Cancel",
    loadingApplication: "Loading application...",
    realTimeCollaboration: "Real-time Collaboration",
    enableCollaboration: "Enable real-time collaboration",
    collaborators: "Collaborators",
    blockUsage: "Block Usage",
    customDomain: "Custom Domain",
    customDomainActive: "Your custom domain is now active! Visit your bio at:",
    offlineSaveError: "Cannot save while offline. Changes stored locally.",
    aiAssistant: "AI Assistant",
    blockConfigurator: "Block Settings",
    tourBlockPalette: "Add different content blocks to your bio page",
    tourMobilePreview: "Preview how your bio looks on mobile devices",
    tourAIAssistant: "Get AI suggestions to improve your content",
    tourSaveButton: "Save your work in progress",
    tourPublishButton: "Publish your bio page",
    tourHelpButton: "Get help with keyboard shortcuts",
    templateGallery: "Template Gallery",
    mobilePreview: "Mobile Preview",
    openMobilePreview: "Open Mobile Preview",
    yourBioLink: "Your Bio Link",
    purchaseCreditsFor: "Purchase {amount} credits for ${(amount * 0.01).toFixed(2)}",
    connected: "Connected",
    customDomainInput: "Enter custom domain",
    saving: "Saving...",
    editorTabs: "Editor tabs",
    blocks: "Blocks",
    collaboration: "Collaboration",
    history: "History",
    analytics: "Analytics",
    theme: "Theme",
    settings: "Settings",
    close: "Close",
    processingPayment: "Processing payment",
    csrfError: "Security token expired. Please refresh the page.",
    retrying: "Retrying...",
    retryFailed: "Retry failed. Please check your connection.",
    dragInstructions: "Press space bar to lift",
    dragHandle: "Drag handle",
    sortableBlock: "Sortable block",
    dropTarget: "Drop target",
    droppedItem: "Dropped item",
    blockAddedAria: "Block added: {type}",
    blockDeletedAria: "Block deleted",
    blockMovedAria: "Block moved from position {from} to {to}",
    blockDuplicatedAria: "Block duplicated",
    themeAppliedAria: "Theme applied",
    creditsPurchasedAria: "{amount} AI credits purchased",
    domainConnectedAria: "Domain connected: {domain}",
    versionSavedAria: "Version saved",
    versionRestoredAria: "Version restored",
    paymentInitiatedAria: "Payment initiated for {type}",
    paymentCompletedAria: "Payment completed",
    exportSuccessAria: "Exported as HTML",
    tourCompleted: "Tour completed",
    skipTour: "Skip tour",
    nextStep: "Next",
    lastStep: "Done",
    videoUrl: "Video URL",
    productName: "Product Name",
    productPrice: "Price",
    productDescription: "Description",
    emailPlaceholder: "Your email",
    testimonialText: "Testimonial text",
    testimonialAuthor: "Author",
    calendarTitle: "Schedule a Meeting",
    calendarDescription: "Select available time slots",
    addToCalendar: "Add to Calendar",
    remove: "Remove",
    addLink: "Add Link",
    selectTimeSlot: "Select time slot",
    monday: "Monday",
    tuesday: "Tuesday",
    wednesday: "Wednesday",
    thursday: "Thursday",
    friday: "Friday",
    saturday: "Saturday",
    sunday: "Sunday",
    availableSlots: "Available time slots",
    timezone: "Timezone",
    selectTimezone: "Select your timezone",
    addSlot: "Add Slot",
    slotAdded: "Time slot added",
    slotRemoved: "Time slot removed",
    aiSuggestion: "AI Suggestion",
    improveText: "Improve text",
    generateContent: "Generate content",
    fixGrammar: "Fix grammar",
    makeEngaging: "Make more engaging",
    shortenText: "Shorten text",
    aiThinking: "AI is thinking...",
    applySuggestion: "Apply Suggestion",
    regenerate: "Regenerate",
    suggestionApplied: "Suggestion applied!",
    abTestTitle: "A/B Testing",
    createTest: "Create New Test",
    testName: "Test Name",
    testDescription: "Test Description",
    variations: "Variations",
    addVariation: "Add Variation",
    startTest: "Start Test",
    stopTest: "Stop Test",
    testStarted: "Test started",
    testStopped: "Test stopped",
    referralTitle: "Referral Program",
    yourLink: "Your referral link",
    copies: "Copies",
    clicks: "Clicks",
    conversions: "Conversions",
    earnings: "Earnings",
    copyLink: "Copy Link",
    inviteFriends: "Invite Friends",
    themeCustomization: "Theme Customization",
    primaryColor: "Primary Color",
    backgroundColor: "Background Color",
    textColor: "Text Color",
    fontFamily: "Font Family",
    borderRadius: "Border Radius",
    saveTheme: "Save Theme",
    themeSaved: "Theme saved successfully",
    applyToAll: "Apply to all blocks",
    preview: "Preview",
    reset: "Reset",
    referralTitle: "Referral Program",
    yourLink: "Your referral link",
    copies: "Copies",
    clicks: "Clicks",
    conversions: "Conversions",
    earnings: "Earnings",
    copyLink: "Copy Link",
    inviteFriends: "Invite Friends",
    referralStats: "Referral Statistics",
    referralActivity: "Recent Activity",
    referralTier: "Your Tier",
    tierBasic: "Starter",
    tierPro: "Ambassador",
    tierElite: "Elite",
    referralRewards: "Available Rewards",
    claimReward: "Claim Reward",
    referralInstructions: "Earn 500 credits for each friend who signs up and 10% of their first payment",
    referralTerms: "Terms & Conditions",
    leaderboard: "Leaderboard",
    yourRank: "Your Rank",
    referralTarget: "Target to next tier",
    shareOptions: "Share Via",
    email: "Email",
    whatsapp: "WhatsApp",
    sms: "SMS",
    more: "More",
    rewardCredits: "{amount} credits",
    rewardProMonth: "1 Month Pro",
    rewardCustomDomain: "Custom Domain",
    rewardAchieved: "Reward Achieved!",
    referralDashboard: "Affiliate Dashboard",
    conversionRate: "Conversion Rate",
    pendingEarnings: "Pending Payout",
    affiliateResources: "Marketing Resources",
    downloadAssets: "Download Assets",
    referralFaq: "FAQ",
  },
};

// ============== ERROR BOUNDARY ==============
const ErrorFallback = ({ error, resetErrorBoundary }: any) => {
  const { formatMessage } = useIntl();
  
  return (
    <div role="alert" className="bg-red-50 border border-red-200 rounded-lg p-4">
      <h3 className="font-bold text-red-800">{formatMessage({ id: 'errorTitle' })}</h3>
      <pre className="text-red-700 text-sm mt-2">{error.message}</pre>
      <Button 
        color="danger" 
        className="mt-3"
        onClick={resetErrorBoundary}
        aria-label={formatMessage({ id: 'tryAgain' })}
      >
        {formatMessage({ id: 'tryAgain' })}
      </Button>
    </div>
  );
};

// ============== LAZY LOADED COMPONENTS ==============
const AnalyticsDashboard = lazy(() => import('@/components/AnalyticsDashboard'));
const ThemeCustomizer = lazy(() => import('@/components/ThemeCustomizer'));
const TemplateGallery = lazy(() => import('@/components/TemplateGallery'));
const MobilePreview = lazy(() => import('@/components/MobilePreview'));
const CollaboratorPresence = lazy(() => import('@/components/CollaboratorPresence'));
const VersionHistory = lazy(() => import('@/components/VersionHistory'));
const AIAssistant = lazy(() => import('@/components/AIAssistant'));
const BlockConfigurator = lazy(() => import('@/components/BlockConfigurator'));
const ABTestController = lazy(() => import('@/components/ABTestController'));
const ReferralDashboard = lazy(() => import('@/components/ReferralDashboard'));
const UsageTracker = lazy(() => import('@/components/UsageTracker'));

// ============== CONSTANTS ==============
const MAX_FREE_BLOCKS = 10;
const PRO_PLAN_PRICE = 9.99;
const ENTERPRISE_PLAN_PRICE = 29.99;
const AI_CREDIT_COST = 0.01;
const OFFLINE_DRAFT_KEY = 'bioBuilder_offline_draft';
const UNDO_LIMIT = 20;
const MAX_RETRY_ATTEMPTS = 3;
const RETRY_DELAY = 2000; // 2 seconds

// Referral constants
const REFERRAL_CREDIT_REWARD = 500;
const REFERRAL_COMMISSION_RATE = 0.1; // 10%
const REFERRAL_TIERS = [
  { name: 'Starter', minReferrals: 0, rewards: ['500_credits'] },
  { name: 'Ambassador', minReferrals: 5, rewards: ['1_month_pro', '1000_credits'] },
  { name: 'Elite', minReferrals: 20, rewards: ['custom_domain', '3_months_pro', '5000_credits'] }
];

// ============== TYPES ==============
type BlockType = 'text' | 'image' | 'button' | 'social' | 'video' | 'product' | 'email' | 'divider' | 'testimonial' | 'calendar' | 'referral';

interface ContentBlock {
  id: string;
  type: BlockType;
  content: string;
  config?: Record<string, any>;
  createdAt: Date;
  updatedAt: Date;
  version: number;
  position: number;
  styles?: React.CSSProperties;
}

interface Referral {
  id: string;
  refereeId: string;
  refereeEmail: string;
  date: Date;
  status: 'pending' | 'completed' | 'cancelled';
  rewardAmount: number;
  commissionEarned: number;
}

interface Reward {
  id: string;
  name: string;
  description: string;
  type: 'credits' | 'subscription' | 'feature';
  value: number;
  claimed: boolean;
  claimDate?: Date;
}

interface User {
  uid: string;
  email: string;
  displayName: string;
  photoURL: string;
  username: string;
  customDomain?: string;
  subscription: {
    plan: 'free' | 'pro' | 'enterprise';
    status: 'active' | 'inactive' | 'canceled';
    periodEnd: Date;
  };
  bioPage: ContentBlock[];
  createdAt: Date;
  lastLogin: Date;
  referralCode?: string;
  credits?: number;
  referralCount?: number;
  referralEarnings?: number;
  referralTier?: number;
  referrals?: Referral[];
  rewards?: Reward[];
  theme?: {
    primaryColor: string;
    fontFamily: string;
    borderRadius: string;
    backgroundColor: string;
    textColor: string;
  };
}

interface EditorState {
  blocks: ContentBlock[];
  activeBlock: ContentBlock | null;
  collaborators: any[];
  history: any[];
  currentVersion: string;
  templateApplied: boolean;
  isDirty: boolean;
  aiCredits: number;
  undoStack: ContentBlock[][];
  redoStack: ContentBlock[][];
  themeHistory: any[];
  referralStats: {
    shares: number;
    clicks: number;
    conversions: number;
    conversionRate: number;
    pendingPayout: number;
  };
}

type EditorAction =
  | { type: 'ADD_BLOCK'; block: ContentBlock }
  | { type: 'UPDATE_BLOCK'; id: string; updates: Partial<ContentBlock> }
  | { type: 'DELETE_BLOCK'; id: string }
  | { type: 'SET_ACTIVE_BLOCK'; block: ContentBlock | null }
  | { type: 'MOVE_BLOCK'; fromIndex: number; toIndex: number }
  | { type: 'SET_BLOCKS'; blocks: ContentBlock[] }
  | { type: 'ADD_COLLABORATOR'; collaborator: any }
  | { type: 'REMOVE_COLLABORATOR'; userId: string }
  | { type: 'ADD_TO_HISTORY'; snapshot: any }
  | { type: 'RESTORE_VERSION'; versionId: string }
  | { type: 'SET_COLLABORATORS'; collaborators: any[] }
  | { type: 'MARK_DIRTY'; isDirty: boolean }
  | { type: 'UPDATE_CREDITS'; credits: number }
  | { type: 'APPLY_THEME'; theme: any }
  | { type: 'UNDO' }
  | { type: 'REDO' }
  | { type: 'PUSH_UNDO_STACK'; snapshot: ContentBlock[] }
  | { type: 'ADD_THEME_TO_HISTORY'; theme: any }
  | { type: 'RECORD_REFERRAL_ACTION'; actionType: 'share' | 'click' }
  | { type: 'ADD_REFERRAL'; referral: Referral }
  | { type: 'UPDATE_REFERRAL_STATUS'; id: string; status: 'pending' | 'completed' | 'cancelled' }
  | { type: 'ADD_REWARD'; reward: Reward }
  | { type: 'CLAIM_REWARD'; id: string };

interface EditorContextType {
  state: EditorState;
  dispatch: React.Dispatch<EditorAction>;
  addBlock: (type: BlockType) => void;
  updateBlock: (id: string, updates: Partial<ContentBlock>) => void;
  deleteBlock: (id: string) => void;
  moveBlock: (fromIndex: number, toIndex: number) => void;
  applyTemplate: (template: ContentBlock[]) => void;
  saveVersion: (versionType: 'auto' | 'manual') => Promise<boolean>;
  restoreVersion: (versionId: string) => Promise<void>;
  duplicateBlock: (blockId: string) => void;
  applyTheme: (theme: any) => void;
  purchaseCredits: (amount: number) => Promise<boolean>;
  undo: () => void;
  redo: () => void;
  restoreTheme: (theme: any) => void;
  recordReferralAction: (actionType: 'share' | 'click') => void;
  addReferral: (referral: Omit<Referral, 'id' | 'date'>) => void;
  updateReferralStatus: (id: string, status: 'pending' | 'completed' | 'cancelled') => void;
  addReward: (reward: Omit<Reward, 'id'>) => void;
  claimReward: (id: string) => void;
}

interface SubscriptionState {
  plan: 'free' | 'pro' | 'enterprise';
  usage: {
    ai_requests: number;
    blocks: number;
    collaborators: number;
  };
  limits: {
    ai_requests: number;
    blocks: number;
    collaborators: number;
  };
}

// ============== EDITOR CONTEXT ==============
const EditorContext = createContext<EditorContextType | undefined>(undefined);

const editorReducer = (state: EditorState, action: EditorAction): EditorState => {
  switch (action.type) {
    case 'ADD_BLOCK':
      return { 
        ...state, 
        blocks: [...state.blocks, action.block],
        isDirty: true,
        undoStack: [...state.undoStack.slice(-UNDO_LIMIT + 1), state.blocks]
      };
    case 'UPDATE_BLOCK':
      const updatedBlocks = state.blocks.map(block =>
        block.id === action.id ? { ...block, ...action.updates, updatedAt: new Date() } : block
      );
      return {
        ...state,
        blocks: updatedBlocks,
        isDirty: true,
        undoStack: [...state.undoStack.slice(-UNDO_LIMIT + 1), state.blocks]
      };
    case 'DELETE_BLOCK':
      const filteredBlocks = state.blocks.filter(block => block.id !== action.id);
      return {
        ...state,
        blocks: filteredBlocks,
        activeBlock: state.activeBlock?.id === action.id ? null : state.activeBlock,
        isDirty: true,
        undoStack: [...state.undoStack.slice(-UNDO_LIMIT + 1), state.blocks]
      };
    case 'SET_ACTIVE_BLOCK':
      return { ...state, activeBlock: action.block };
    case 'MOVE_BLOCK':
      const newBlocks = [...state.blocks];
      const [movedBlock] = newBlocks.splice(action.fromIndex, 1);
      newBlocks.splice(action.toIndex, 0, movedBlock);
      return { 
        ...state, 
        blocks: newBlocks, 
        isDirty: true,
        undoStack: [...state.undoStack.slice(-UNDO_LIMIT + 1), state.blocks]
      };
    case 'SET_BLOCKS':
      return { 
        ...state, 
        blocks: action.blocks, 
        templateApplied: true, 
        isDirty: true,
        undoStack: [...state.undoStack.slice(-UNDO_LIMIT + 1), state.blocks]
      };
    case 'ADD_COLLABORATOR':
      return {
        ...state,
        collaborators: state.collaborators.some(c => c.id === action.collaborator.id)
          ? state.collaborators
          : [...state.collaborators, action.collaborator],
        isDirty: true
      };
    case 'REMOVE_COLLABORATOR':
      return {
        ...state,
        collaborators: state.collaborators.filter(c => c.id !== action.userId),
        isDirty: true
      };
    case 'SET_COLLABORATORS':
      return { ...state, collaborators: action.collaborators };
    case 'ADD_TO_HISTORY':
      return { ...state, history: [...state.history, action.snapshot] };
    case 'RESTORE_VERSION':
      return { ...state, currentVersion: action.versionId, isDirty: true };
    case 'MARK_DIRTY':
      return { ...state, isDirty: action.isDirty };
    case 'UPDATE_CREDITS':
      return { ...state, aiCredits: action.credits };
    case 'APPLY_THEME':
      return { 
        ...state, 
        blocks: state.blocks.map(block => ({ 
          ...block, 
          styles: { ...block.styles, ...action.theme } 
        })),
        themeHistory: [...state.themeHistory, action.theme]
      };
    case 'ADD_THEME_TO_HISTORY':
      return {
        ...state,
        themeHistory: [...state.themeHistory, action.theme]
      };
    case 'UNDO':
      if (state.undoStack.length === 0) return state;
      const previousState = state.undoStack[state.undoStack.length - 1];
      return {
        ...state,
        blocks: previousState,
        undoStack: state.undoStack.slice(0, -1),
        redoStack: [...state.redoStack, state.blocks],
        isDirty: true
      };
    case 'REDO':
      if (state.redoStack.length === 0) return state;
      const nextState = state.redoStack[state.redoStack.length - 1];
      return {
        ...state,
        blocks: nextState,
        redoStack: state.redoStack.slice(0, -1),
        undoStack: [...state.undoStack, state.blocks],
        isDirty: true
      };
    case 'PUSH_UNDO_STACK':
      return {
        ...state,
        undoStack: [...state.undoStack, action.snapshot]
      };
    case 'RECORD_REFERRAL_ACTION':
      return {
        ...state,
        referralStats: {
          ...state.referralStats,
          [action.actionType === 'share' ? 'shares' : 'clicks']: 
            state.referralStats[action.actionType === 'share' ? 'shares' : 'clicks'] + 1
        }
      };
    case 'ADD_REFERRAL':
      return {
        ...state,
        referralStats: {
          ...state.referralStats,
          conversions: state.referralStats.conversions + 1,
          conversionRate: ((state.referralStats.conversions + 1) / state.referralStats.clicks) * 100 || 0
        }
      };
    default:
      return state;
  }
};

export const EditorProvider: React.FC<{ 
  user: User; 
  initialBlocks: ContentBlock[];
  children: React.ReactNode 
}> = ({ user, initialBlocks, children }) => {
  const [state, dispatch] = useReducer(editorReducer, {
    blocks: initialBlocks,
    activeBlock: null,
    collaborators: [],
    history: [],
    currentVersion: 'initial',
    templateApplied: false,
    isDirty: false,
    aiCredits: user.credits || 0,
    undoStack: [],
    redoStack: [],
    themeHistory: [],
    referralStats: {
      shares: 0,
      clicks: 0,
      conversions: 0,
      conversionRate: 0,
      pendingPayout: 0
    }
  });

  const [csrfToken, setCsrfToken] = useState('');

  // Auto-save functionality with offline support
  useEffect(() => {
    const handleBeforeUnload = (e: BeforeUnloadEvent) => {
      if (state.isDirty) {
        e.preventDefault();
        e.returnValue = 'You have unsaved changes. Are you sure you want to leave?';
      }
    };

    const saveDraftLocally = () => {
      if (state.isDirty) {
        localStorage.setItem(`${OFFLINE_DRAFT_KEY}_${user.uid}`, JSON.stringify({
          blocks: state.blocks,
          theme: user.theme,
          timestamp: new Date().toISOString()
        }));
      }
    };

    const handleOnline = async () => {
      const draft = localStorage.getItem(`${OFFLINE_DRAFT_KEY}_${user.uid}`);
      if (draft) {
        try {
          const { blocks, theme } = JSON.parse(draft);
          await saveVersion('auto');
          if (theme) {
            localStorage.setItem(`bioBuilder_theme_${user.uid}`, JSON.stringify(theme));
          }
          localStorage.removeItem(`${OFFLINE_DRAFT_KEY}_${user.uid}`);
          toast.success('Offline changes synced successfully');
        } catch (error) {
          console.error('Failed to sync offline changes:', error);
          toast.error('Failed to sync offline changes');
        }
      }
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    window.addEventListener('online', handleOnline);

    const autoSaveTimer = setTimeout(() => {
      if (state.isDirty) {
        saveVersion('auto');
        dispatch({ type: 'MARK_DIRTY', isDirty: false });
        toast.success('Auto-saved successfully');
      }
    }, 30000); // 30 seconds
    
    return () => {
      clearTimeout(autoSaveTimer);
      window.removeEventListener('beforeunload', handleBeforeUnload);
      window.removeEventListener('online', handleOnline);
      saveDraftLocally();
    };
  }, [state.isDirty, state.blocks, user.uid]);

  // Save initial state for undo/redo
  useEffect(() => {
    if (state.undoStack.length === 0) {
      dispatch({ type: 'PUSH_UNDO_STACK', snapshot: initialBlocks });
    }
  }, [initialBlocks]);

  const addBlock = useCallback((type: BlockType) => {
    const newBlock: ContentBlock = {
      id: `block-${Date.now()}`,
      type,
      content: '',
      createdAt: new Date(),
      updatedAt: new Date(),
      version: 1,
      position: state.blocks.length,
      styles: {}
    };
    dispatch({ type: 'ADD_BLOCK', block: newBlock });
    dispatch({ type: 'SET_ACTIVE_BLOCK', block: newBlock });
  }, [state.blocks.length]);

  const updateBlock = useCallback(debounce((id: string, updates: Partial<ContentBlock>) => {
    dispatch({ type: 'UPDATE_BLOCK', id, updates });
  }, 300), []);

  const deleteBlock = useCallback((id: string) => {
    dispatch({ type: 'DELETE_BLOCK', id });
    toast.success('Block deleted');
  }, []);

  const moveBlock = useCallback((fromIndex: number, toIndex: number) => {
    dispatch({ type: 'MOVE_BLOCK', fromIndex, toIndex });
  }, []);

  const applyTemplate = useCallback((template: ContentBlock[]) => {
    dispatch({ type: 'SET_BLOCKS', blocks: template });
    toast.success('Template applied');
  }, []);

  const duplicateBlock = useCallback((blockId: string) => {
    const blockToDuplicate = state.blocks.find(b => b.id === blockId);
    if (!blockToDuplicate) return;
    
    const duplicatedBlock = {
      ...blockToDuplicate,
      id: `block-${Date.now()}`,
      createdAt: new Date(),
      updatedAt: new Date(),
      position: state.blocks.length
    };
    
    dispatch({ type: 'ADD_BLOCK', block: duplicatedBlock });
    dispatch({ type: 'SET_ACTIVE_BLOCK', block: duplicatedBlock });
    toast.success('Block duplicated');
  }, [state.blocks]);

  const saveVersion = useCallback(async (versionType: 'auto' | 'manual'): Promise<boolean> => {
    const versionId = `v-${Date.now()}`;
    try {
      localStorage.setItem(`bioBuilder_bioPage_${user.uid}`, JSON.stringify(state.blocks));
      localStorage.setItem(`bioBuilder_credits_${user.uid}`, state.aiCredits.toString());
      
      dispatch({ type: 'ADD_TO_HISTORY', snapshot: { 
        id: versionId, 
        blocks: state.blocks,
        theme: user.theme
      }});
      dispatch({ type: 'RESTORE_VERSION', versionId });
      return true;
    } catch (error: any) {
      console.error('Save failed:', error);
      
      localStorage.setItem(`${OFFLINE_DRAFT_KEY}_${user.uid}`, JSON.stringify({
        blocks: state.blocks,
        theme: user.theme,
        timestamp: new Date().toISOString()
      }));
      toast('Changes saved locally. Will sync when online');
      return true;
    }
  }, [state.blocks, user.uid]);

  const restoreVersion = useCallback(async (versionId: string) => {
    try {
      const versionData = localStorage.getItem(`bioBuilder_version_${user.uid}_${versionId}`);
      if (versionData) {
        const { blocks, theme } = JSON.parse(versionData);
        dispatch({ type: 'SET_BLOCKS', blocks });
        if (theme) {
          applyTheme(theme);
        }
        dispatch({ type: 'RESTORE_VERSION', versionId });
        toast.success('Version restored');
      }
    } catch (error: any) {
      console.error('Restore failed:', error);
      toast.error('Restore failed');
    }
  }, [user.uid]);

  const applyTheme = useCallback((theme: any) => {
    dispatch({ type: 'APPLY_THEME', theme });
    localStorage.setItem(`bioBuilder_theme_${user.uid}`, JSON.stringify(theme));
    toast.success('Theme applied');
  }, [user.uid]);

  const restoreTheme = useCallback((theme: any) => {
    dispatch({ type: 'APPLY_THEME', theme });
    toast.success('Theme restored');
  }, []);

  const purchaseCredits = useCallback(async (amount: number): Promise<boolean> => {
    try {
      await new Promise(resolve => setTimeout(resolve, 1000));
      const newCredits = state.aiCredits + amount;
      dispatch({ type: 'UPDATE_CREDITS', credits: newCredits });
      
      localStorage.setItem(`bioBuilder_credits_${user.uid}`, newCredits.toString());
      
      toast.success(`${amount} AI credits purchased!`);
      return true;
    } catch (error: any) {
      console.error('Credit purchase failed:', error);
      toast.error('Failed to purchase credits');
      return false;
    }
  }, [state.aiCredits, user.uid]);

  const undo = useCallback(() => {
    dispatch({ type: 'UNDO' });
    toast('Undo completed');
  }, []);

  const redo = useCallback(() => {
    dispatch({ type: 'REDO' });
    toast('Redo completed');
  }, []);

  // Referral system functions
  const recordReferralAction = useCallback((actionType: 'share' | 'click') => {
    dispatch({ type: 'RECORD_REFERRAL_ACTION', actionType });
    const stats = JSON.parse(localStorage.getItem(`bioBuilder_referralStats_${user.uid}`) || {});
    stats[actionType] = (stats[actionType] || 0) + 1;
    localStorage.setItem(`bioBuilder_referralStats_${user.uid}`, JSON.stringify(stats));
  }, [user.uid]);
  
  const addReferral = useCallback((referral: Omit<Referral, 'id' | 'date'>) => {
    const newReferral: Referral = {
      ...referral,
      id: uuidv4(),
      date: new Date()
    };
    dispatch({ type: 'ADD_REFERRAL', referral: newReferral });
    const referrals = JSON.parse(localStorage.getItem(`bioBuilder_referrals_${user.uid}`) || []);
    localStorage.setItem(`bioBuilder_referrals_${user.uid}`, JSON.stringify([...referrals, newReferral]));
  }, [user.uid]);

  const updateReferralStatus = useCallback((id: string, status: 'pending' | 'completed' | 'cancelled') => {
    dispatch({ type: 'UPDATE_REFERRAL_STATUS', id, status });
    const referrals = JSON.parse(localStorage.getItem(`bioBuilder_referrals_${user.uid}`) || []);
    const updated = referrals.map((ref: Referral) => 
      ref.id === id ? { ...ref, status } : ref
    );
    localStorage.setItem(`bioBuilder_referrals_${user.uid}`, JSON.stringify(updated));
  }, [user.uid]);

  const addReward = useCallback((reward: Omit<Reward, 'id'>) => {
    const newReward: Reward = {
      ...reward,
      id: uuidv4()
    };
    dispatch({ type: 'ADD_REWARD', reward: newReward });
    const rewards = JSON.parse(localStorage.getItem(`bioBuilder_rewards_${user.uid}`) || []);
    localStorage.setItem(`bioBuilder_rewards_${user.uid}`, JSON.stringify([...rewards, newReward]));
  }, [user.uid]);

  const claimReward = useCallback((id: string) => {
    dispatch({ type: 'CLAIM_REWARD', id });
    const rewards = JSON.parse(localStorage.getItem(`bioBuilder_rewards_${user.uid}`) || []);
    const updated = rewards.map((reward: Reward) => 
      reward.id === id ? { ...reward, claimed: true, claimDate: new Date() } : reward
    );
    localStorage.setItem(`bioBuilder_rewards_${user.uid}`, JSON.stringify(updated));
    toast.success('Reward claimed!');
  }, [user.uid]);

  const value = useMemo(() => ({
    state,
    dispatch,
    addBlock,
    updateBlock,
    deleteBlock,
    moveBlock,
    applyTemplate,
    saveVersion,
    restoreVersion,
    duplicateBlock,
    applyTheme,
    purchaseCredits,
    undo,
    redo,
    restoreTheme,
    recordReferralAction,
    addReferral,
    updateReferralStatus,
    addReward,
    claimReward
  }), [
    state,
    addBlock,
    updateBlock,
    deleteBlock,
    moveBlock,
    applyTemplate,
    saveVersion,
    restoreVersion,
    duplicateBlock,
    applyTheme,
    purchaseCredits,
    undo,
    redo,
    restoreTheme,
    recordReferralAction,
    addReferral,
    updateReferralStatus,
    addReward,
    claimReward
  ]);

  return (
    <EditorContext.Provider value={value}>
      {children}
    </EditorContext.Provider>
  );
};

export const useEditor = () => {
  const context = useContext(EditorContext);
  if (!context) {
    throw new Error('useEditor must be used within an EditorProvider');
  }
  return context;
};

// ============== AUTH STORE ==============
const useAuthStore = () => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const { formatMessage } = useIntl();

  useEffect(() => {
    const storedUser = localStorage.getItem('bioBuilder_user');
    if (storedUser) {
      const parsedUser = JSON.parse(storedUser) as User;
      if (!parsedUser.referralCode) {
        parsedUser.referralCode = uuidv4().slice(0, 8).toUpperCase();
      }
      if (parsedUser.referralCount === undefined) {
        parsedUser.referralCount = 0;
      }
      if (parsedUser.referralEarnings === undefined) {
        parsedUser.referralEarnings = 0;
      }
      if (parsedUser.referralTier === undefined) {
        parsedUser.referralTier = 0;
      }
      if (!parsedUser.rewards) {
        parsedUser.rewards = [];
      }
      if (!parsedUser.referrals) {
        parsedUser.referrals = [];
      }
      setUser(parsedUser);
    } else {
      const newUser: User = {
        uid: uuidv4(),
        email: 'user@example.com',
        displayName: 'New User',
        photoURL: '',
        username: 'newuser',
        subscription: { 
          plan: 'free', 
          status: 'active', 
          periodEnd: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) 
        },
        bioPage: [],
        createdAt: new Date(),
        lastLogin: new Date(),
        referralCode: uuidv4().slice(0, 8).toUpperCase(),
        credits: 10,
        referralCount: 0,
        referralEarnings: 0,
        referralTier: 0,
        referrals: [],
        rewards: [],
        theme: {
          primaryColor: '#0072F5',
          fontFamily: 'Inter',
          borderRadius: '12px',
          backgroundColor: '#ffffff',
          textColor: '#000000'
        }
      };
      localStorage.setItem('bioBuilder_user', JSON.stringify(newUser));
      setUser(newUser);
    }
    setLoading(false);
  }, []);

  return { user, loading };
};

// ============== SUBSCRIPTION HOOK ==============
const useSubscription = (userId: string) => {
  const [subscription, setSubscription] = useState<SubscriptionState>({
    plan: 'free',
    usage: {
      ai_requests: 0,
      blocks: 0,
      collaborators: 0
    },
    limits: {
      ai_requests: 5,
      blocks: MAX_FREE_BLOCKS,
      collaborators: 1
    }
  });

  useEffect(() => {
    if (!userId) return;
    
    const userData = localStorage.getItem('bioBuilder_user');
    if (userData) {
      const user = JSON.parse(userData) as User;
      setSubscription({
        plan: user.subscription.plan,
        usage: {
          ai_requests: user.credits ? 10 - user.credits : 0,
          blocks: user.bioPage?.length || 0,
          collaborators: user.collaborators?.length || 0
        },
        limits: {
          ai_requests: user.subscription.plan === 'pro' ? 50 : user.subscription.plan === 'enterprise' ? 500 : 5,
          blocks: user.subscription.plan === 'pro' ? 50 : user.subscription.plan === 'enterprise' ? 1000 : MAX_FREE_BLOCKS,
          collaborators: user.subscription.plan === 'pro' ? 3 : user.subscription.plan === 'enterprise' ? 10 : 1
        }
      });
    }
  }, [userId]);

  const canUseFeature = (feature: string) => {
    switch (feature) {
      case 'ai_suggestions':
        return subscription.usage.ai_requests < subscription.limits.ai_requests;
      case 'collaboration':
        return subscription.plan !== 'free';
      case 'premium_templates':
        return subscription.plan !== 'free';
      case 'custom_domain':
        return subscription.plan === 'pro' || subscription.plan === 'enterprise';
      default:
        return true;
    }
  };

  const recordUsage = (feature: string, quantity: number) => {
    console.log(`Recorded usage for ${feature}: ${quantity}`);
  };

  return { 
    canUseFeature, 
    usage: subscription.usage, 
    limits: subscription.limits,
    recordUsage,
    plan: subscription.plan
  };
};

// ============== REFERRAL SYSTEM COMPONENTS ==============
const ShareButton: React.FC<{ 
  platform: string; 
  icon: React.ReactNode;
  onClick: () => void;
}> = ({ platform, icon, onClick }) => (
  <Button 
    className="h-24 flex flex-col items-center justify-center bg-white border border-gray-200 hover:bg-gray-50"
    onClick={onClick}
  >
    <div className="text-2xl mb-2">{icon}</div>
    <span>{platform}</span>
  </Button>
);

const StatCard: React.FC<{ 
  title: string; 
  value: string | number; 
  icon: React.ReactNode;
  color: string;
}> = ({ title, value, icon, color }) => (
  <Card className={`${color} border-none`}>
    <CardBody className="flex flex-row items-center justify-between">
      <div>
        <p className="text-sm font-semibold">{title}</p>
        <p className="text-2xl font-bold">{value}</p>
      </div>
      <div className="p-3 rounded-full bg-white/20">
        {icon}
      </div>
    </CardBody>
  </Card>
);

const ReferralDashboard: React.FC = () => {
  const { user } = useAuthStore();
  const { state, recordReferralAction, claimReward } = useEditor();
  const [isSharing, setIsSharing] = useState(false);
  const [selectedReward, setSelectedReward] = useState<string | null>(null);
  const referralLink = `https://biobuilder.app/signup?ref=${user?.referralCode}`;
  
  const handleShare = (method: string) => {
    recordReferralAction('share');
    
    let shareUrl = '';
    switch(method) {
      case 'email':
        shareUrl = `mailto:?subject=Join me on BioBuilder&body=Create your bio page with BioBuilder! Use my referral code: ${user?.referralCode} - ${referralLink}`;
        break;
      case 'whatsapp':
        shareUrl = `https://wa.me/?text=Create your bio page with BioBuilder! Use my referral code: ${user?.referralCode} - ${referralLink}`;
        break;
      case 'sms':
        shareUrl = `sms:?body=Create your bio page with BioBuilder! Use my referral code: ${user?.referralCode} - ${referralLink}`;
        break;
      default:
        return;
    }
    
    window.open(shareUrl, '_blank');
  };
  
  const copyReferralLink = () => {
    navigator.clipboard.writeText(referralLink);
    toast.success('Referral link copied!');
    recordReferralAction('share');
  };
  
  const availableRewards = [
    {
      id: '500_credits',
      name: '500 Credits',
      description: 'For your first referral',
      type: 'credits',
      value: 500,
      claimed: user?.rewards?.some(r => r.id === '500_credits' && r.claimed) || false
    },
    {
      id: '1_month_pro',
      name: '1 Month Pro',
      description: 'For 5+ referrals',
      type: 'subscription',
      value: PRO_PLAN_PRICE,
      claimed: user?.rewards?.some(r => r.id === '1_month_pro' && r.claimed) || false,
      available: (user?.referralCount || 0) >= 5
    },
    {
      id: 'custom_domain',
      name: 'Custom Domain',
      description: 'For 20+ referrals',
      type: 'feature',
      value: 0,
      claimed: user?.rewards?.some(r => r.id === 'custom_domain' && r.claimed) || false,
      available: (user?.referralCount || 0) >= 20
    }
  ];
  
  const currentTier = REFERRAL_TIERS[user?.referralTier || 0];
  const nextTier = REFERRAL_TIERS[(user?.referralTier || 0) + 1];
  const progress = nextTier 
    ? Math.min(100, ((user?.referralCount || 0) / nextTier.minReferrals) * 100) 
    : 100;

  return (
    <div className="space-y-6">
      <Card className="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-gray-800 dark:to-purple-900">
        <CardBody>
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
            <div>
              <h3 className="text-xl font-bold flex items-center gap-2">
                <FaShareAlt className="text-purple-600" />
                {messages.en.referralTitle}
              </h3>
              <p className="text-sm text-gray-600 dark:text-gray-300 mt-1">
                {messages.en.referralInstructions}
              </p>
            </div>
            <Chip color="warning" variant="flat">
              {currentTier?.name || 'Starter'} Tier
            </Chip>
          </div>
          
          <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
            <StatCard 
              title="Referrals" 
              value={user?.referralCount || 0} 
              icon={<FiUserPlusIcon />} 
              color="bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200"
            />
            <StatCard 
              title="Earnings" 
              value={`$${(user?.referralEarnings || 0).toFixed(2)}`} 
              icon={<FaDollarSign />} 
              color="bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200"
            />
            <StatCard 
              title="Conversion" 
              value={`${state.referralStats.conversionRate.toFixed(1)}%`} 
              icon={<FiBarChart2 />} 
              color="bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200"
            />
          </div>
        </CardBody>
      </Card>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Referral Link Card */}
        <Card>
          <CardBody className="space-y-4">
            <h4 className="font-bold flex items-center gap-2">
              <FiShare2 />
              {messages.en.yourLink}
            </h4>
            
            <div className="flex items-center gap-2">
              <Input 
                value={referralLink}
                readOnly
                className="flex-1"
                aria-label="Referral link"
              />
              <Button 
                isIconOnly 
                onClick={copyReferralLink}
                aria-label="Copy referral link"
              >
                <FiCopy />
              </Button>
            </div>
            
            <div className="flex justify-center mt-2">
              <QRCode 
                value={referralLink} 
                size={128}
                bgColor={"#ffffff"}
                fgColor={"#000000"}
                level={"L"}
                includeMargin={false}
              />
            </div>
            
            <div className="mt-4">
              <Button 
                color="primary" 
                className="w-full"
                onClick={() => setIsSharing(true)}
              >
                <FaShareAlt className="mr-2" />
                {messages.en.shareOptions}
              </Button>
            </div>
          </CardBody>
        </Card>

        {/* Rewards Card */}
        <Card>
          <CardBody className="space-y-4">
            <h4 className="font-bold flex items-center gap-2">
              <FaGift />
              {messages.en.referralRewards}
            </h4>
            
            <div className="space-y-3">
              {availableRewards.map((reward) => (
                <Card 
                  key={reward.id}
                  className={`border ${reward.available ? 'border-blue-300' : 'opacity-50'}`}
                >
                  <CardBody>
                    <div className="flex justify-between items-start">
                      <div>
                        <h5 className="font-bold">{reward.name}</h5>
                        <p className="text-sm text-gray-600">{reward.description}</p>
                      </div>
                      {reward.claimed ? (
                        <Badge color="success" variant="flat">Claimed</Badge>
                      ) : (
                        <Button 
                          size="sm" 
                          color="primary"
                          disabled={!reward.available || reward.claimed}
                          onClick={() => {
                            setSelectedReward(reward.id);
                            claimReward(reward.id);
                          }}
                        >
                          Claim
                        </Button>
                      )}
                    </div>
                  </CardBody>
                </Card>
              ))}
            </div>
          </CardBody>
        </Card>

        {/* Progress Card */}
        <Card>
          <CardBody className="space-y-4">
            <h4 className="font-bold flex items-center gap-2">
              <FaTrophy />
              {messages.en.referralTier}
            </h4>
            
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span>{currentTier?.name} Tier</span>
                {nextTier ? (
                  <span>Next: {nextTier.name}</span>
                ) : (
                  <span className="text-green-600">Top Tier!</span>
                )}
              </div>
              
              <Progress 
                value={progress}
                color="warning"
                size="sm"
                aria-label="Tier progress"
              />
              
              {nextTier && (
                <p className="text-sm text-gray-600 text-center">
                  {nextTier.minReferrals - (user?.referralCount || 0)} more referrals to {nextTier.name}
                </p>
              )}
            </div>
            
            <Divider className="my-2" />
            
            <div>
              <h5 className="font-medium mb-2">Tier Benefits</h5>
              <ul className="space-y-1 text-sm">
                {currentTier?.rewards.map((reward, index) => (
                  <li key={index} className="flex items-center gap-2">
                    <FaCheck className="text-green-500 text-xs" />
                    {reward.replace('_', ' ')}
                  </li>
                ))}
              </ul>
            </div>
          </CardBody>
        </Card>
      </div>

      {/* Activity Table */}
      <Card>
        <CardBody>
          <h4 className="font-bold mb-4 flex items-center gap-2">
            <FiActivity />
            {messages.en.referralActivity}
          </h4>
          
          <Table aria-label="Referral activity">
            <TableHeader>
              <TableColumn>FRIEND</TableColumn>
              <TableColumn>DATE</TableColumn>
              <TableColumn>STATUS</TableColumn>
              <TableColumn>REWARD</TableColumn>
            </TableHeader>
            <TableBody>
              {user?.referrals?.slice(0, 5).map((referral) => (
                <TableRow key={referral.id}>
                  <TableCell>{referral.refereeEmail}</TableCell>
                  <TableCell>
                    {new Date(referral.date).toLocaleDateString()}
                  </TableCell>
                  <TableCell>
                    <Chip 
                      color={
                        referral.status === 'completed' ? 'success' : 
                        referral.status === 'pending' ? 'warning' : 'danger'
                      }
                      variant="flat"
                    >
                      {referral.status}
                    </Chip>
                  </TableCell>
                  <TableCell>
                    {referral.rewardAmount} credits
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardBody>
      </Card>

      {/* Share Modal */}
      <Modal isOpen={isSharing} onClose={() => setIsSharing(false)}>
        <ModalContent>
          <ModalHeader>Share Referral Link</ModalHeader>
          <ModalBody>
            <div className="grid grid-cols-2 gap-4">
              <ShareButton 
                platform="Email" 
                icon={<MdEmail size={24} />} 
                onClick={() => handleShare('email')}
              />
              <ShareButton 
                platform="WhatsApp" 
                icon={<div className="text-green-500 text-2xl">WA</div>} 
                onClick={() => handleShare('whatsapp')}
              />
              <ShareButton 
                platform="SMS" 
                icon={<div className="text-blue-500 text-2xl">SMS</div>} 
                onClick={() => handleShare('sms')}
              />
              <ShareButton 
                platform="Copy Link" 
                icon={<FiCopy size={24} />} 
                onClick={copyReferralLink}
              />
            </div>
          </ModalBody>
        </ModalContent>
      </Modal>
    </div>
  );
};

// ============== REFERRAL BLOCK ==============
const ReferralBlock: React.FC<{
  content: string;
  onChange: (content: string) => void;
}> = ({ content, onChange }) => {
  const { user } = useAuthStore();
  const { recordReferralAction } = useEditor();
  const referralLink = `https://biobuilder.app/signup?ref=${user?.referralCode}`;
  
  const copyLink = () => {
    navigator.clipboard.writeText(referralLink);
    toast.success('Referral link copied!');
    recordReferralAction('share');
  };
  
  return (
    <Card className="border-2 border-dashed border-purple-300 bg-purple-50">
      <CardBody className="flex flex-col items-center text-center p-6">
        <div className="bg-purple-100 p-3 rounded-full mb-4">
          <FaShareAlt className="text-purple-600 text-2xl" />
        </div>
        <h4 className="font-bold text-lg mb-2">Invite Friends</h4>
        <p className="text-gray-600 mb-4">
          Share your referral link and earn rewards
        </p>
        <div className="flex items-center w-full mb-4">
          <Input 
            value={referralLink}
            readOnly
            className="flex-1"
            size="sm"
          />
          <Button 
            isIconOnly 
            size="sm" 
            onClick={copyLink}
          >
            <FiCopy />
          </Button>
        </div>
        <Button 
          color="secondary" 
          className="w-full"
          onClick={copyLink}
        >
          Copy Link
        </Button>
      </CardBody>
    </Card>
  );
};

const BlockConfigurator: React.FC = () => {
  const { state: { activeBlock }, updateBlock } = useEditor();

  if (!activeBlock) {
    return (
      <div className="flex flex-col items-center justify-center h-full text-center p-6">
        <div className="bg-gray-200 border-2 border-dashed rounded-xl w-16 h-16 mb-4" />
        <p className="text-gray-500">Select a block to configure</p>
      </div>
    );
  }

  const handleContentChange = (content: string) => {
    updateBlock(activeBlock.id, { content });
  };

  const renderBlockConfig = () => {
    switch (activeBlock.type) {
      case 'text':
        return (
          <TextBlock
            content={activeBlock.content}
            onChange={handleContentChange}
            styles={activeBlock.styles}
          />
        );
      case 'image':
        return (
          <ImageBlock
            content={activeBlock.content}
            onChange={handleContentChange}
            styles={activeBlock.styles}
          />
        );
      case 'button':
        return (
          <ButtonBlock
            content={activeBlock.content}
            onChange={handleContentChange}
            styles={activeBlock.styles}
          />
        );
      case 'social':
        return <SocialBlock onChange={handleContentChange} />;
      case 'video':
        return <VideoBlock content={activeBlock.content} onChange={handleContentChange} />;
      case 'product':
        return <ProductBlock content={activeBlock.content} onChange={handleContentChange} />;
      case 'email':
        return <EmailBlock content={activeBlock.content} onChange={handleContentChange} />;
      case 'divider':
        return <div className="text-center py-4">Divider Settings</div>;
      case 'testimonial':
        return <TestimonialBlock content={activeBlock.content} onChange={handleContentChange} />;
      case 'calendar':
        return <CalendarBlock content={activeBlock.content} onChange={handleContentChange} />;
      case 'referral':
        return <ReferralBlock content={activeBlock.content} onChange={handleContentChange} />;
      default:
        return <p>Configuration for {activeBlock.type} blocks coming soon</p>;
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h3 className="font-bold flex items-center gap-2">
          <FiEdit3 />
          Block Settings
        </h3>
        <Chip variant="bordered">{activeBlock.type}</Chip>
      </div>
      <Divider />
      {renderBlockConfig()}
    </div>
  );
};

const PaymentForm: React.FC<{ 
  paymentType: 'tip' | 'product' | 'subscription' | 'credits';
  product?: any;
  onSuccess: () => void;
}> = ({ paymentType, product, onSuccess }) => {
  const [isProcessing, setIsProcessing] = useState(false);
  
  const handleSubmit = async () => {
    setIsProcessing(true);
    try {
      // Simulate payment processing
      await new Promise(resolve => setTimeout(resolve, 1500));
      onSuccess();
    } catch (error) {
      toast.error('Payment failed');
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <div className="space-y-4">
      {paymentType === 'tip' ? (
        <div>
          <h4 className="font-medium mb-3">Support Creator</h4>
          <div className="grid grid-cols-3 gap-3">
            {[5, 10, 25].map(amount => (
              <Card 
                key={amount}
                isPressable
                isHoverable
                className="border-2 border-transparent hover:border-primary"
                onClick={handleSubmit}
                aria-label={`Tip $${amount}`}
              >
                <CardBody className="text-center p-4">
                  <div className="font-bold text-lg">${amount}</div>
                </CardBody>
              </Card>
            ))}
          </div>
        </div>
      ) : paymentType === 'product' ? (
        <div>
          <h4 className="font-medium mb-3">{product?.name}</h4>
          <p className="text-lg font-bold mb-4">${product?.price}</p>
          <Button 
            color="primary" 
            className="w-full"
            onClick={handleSubmit}
            isLoading={isProcessing}
            aria-label={`Purchase ${product?.name}`}
          >
            Purchase Now
          </Button>
        </div>
      ) : paymentType === 'subscription' ? (
        <div>
          <h4 className="font-medium mb-3">Upgrade Plan</h4>
          <div className="space-y-3">
            <Card className="border-2 border-blue-500">
              <CardBody>
                <div className="flex justify-between items-center">
                  <div>
                    <h5 className="font-bold">Pro Plan</h5>
                    <p>${PRO_PLAN_PRICE}/month</p>
                  </div>
                  <Chip color="primary">Popular</Chip>
                </div>
                <ul className="mt-3 space-y-1 text-sm">
                  <li>• 50 content blocks</li>
                  <li>• Custom domains</li>
                  <li>• 3 collaborators</li>
                  <li>• Premium templates</li>
                </ul>
              </CardBody>
            </Card>
            <Card>
              <CardBody>
                <div className="flex justify-between items-center">
                  <div>
                    <h5 className="font-bold">Enterprise</h5>
                    <p>${ENTERPRISE_PLAN_PRICE}/month</p>
                  </div>
                </div>
                <ul className="mt-3 space-y-1 text-sm">
                  <li>• Unlimited blocks</li>
                  <li>• 10 collaborators</li>
                  <li>• Priority support</li>
                  <li>• Advanced analytics</li>
                </ul>
              </CardBody>
            </Card>
            <Button 
              color="primary" 
              className="w-full mt-2"
              onClick={handleSubmit}
              isLoading={isProcessing}
              aria-label="Upgrade to Pro"
            >
              Upgrade Now
            </Button>
          </div>
        </div>
      ) : null}
    </div>
  );
};

const PaymentIntegration: React.FC<{ userId: string }> = ({ userId }) => {
  const [visible, setVisible] = useState(false);
  const [paymentType, setPaymentType] = useState<'tip' | 'product' | 'subscription' | 'credits'>('tip');
  const [product, setProduct] = useState<any>(null);
  const [creditsAmount, setCreditsAmount] = useState(100);
  const { purchaseCredits } = useEditor();
  const [isProcessing, setIsProcessing] = useState(false);

  const initiatePayment = async (type: 'tip' | 'product' | 'subscription' | 'credits', productData?: any) => {
    setPaymentType(type);
    if (productData) setProduct(productData);
    setIsProcessing(true);
    
    try {
      // Simulate payment intent creation
      await new Promise(resolve => setTimeout(resolve, 500));
      setVisible(true);
    } catch (error: any) {
      console.error('Payment initiation failed:', error);
      toast.error('Payment failed');
    } finally {
      setIsProcessing(false);
    }
  };

  const handleCreditPurchase = async () => {
    setIsProcessing(true);
    const success = await purchaseCredits(creditsAmount);
    setIsProcessing(false);
    if (success) {
      setVisible(false);
    }
  };

  return (
    <div className="mt-6">
      <Card className="bg-gradient-to-r from-purple-50 to-blue-50 border border-purple-200">
        <CardBody>
          <h3 className="font-bold mb-3 flex items-center gap-2">
            <FiDollarSign className="text-purple-600" />
            Monetization
          </h3>
          <div className="grid grid-cols-2 gap-3">
            <Button 
              color="secondary" 
              className="h-20"
              onClick={() => initiatePayment('tip')}
              aria-label="Add Tip Jar"
            >
              <div className="flex flex-col items-center">
                <span className="text-2xl">💎</span>
                <span>Tip Jar</span>
              </div>
            </Button>
            
            <Button 
              color="success" 
              className="h-20"
              onClick={() => initiatePayment('product', { name: 'Preset Pack', price: 19.99 })}
              aria-label="Sell Products"
            >
              <div className="flex flex-col items-center">
                <span className="text-2xl">🛒</span>
                <span>Products</span>
              </div>
            </Button>
            
            <Button 
              color="warning" 
              className="h-20"
              onClick={() => initiatePayment('subscription')}
              aria-label="Upgrade Subscription"
            >
              <div className="flex flex-col items-center">
                <span className="text-2xl">⭐</span>
                <span>Upgrade</span>
              </div>
            </Button>
            
            <Button 
              color="primary" 
              className="h-20"
              onClick={() => initiatePayment('credits')}
              disabled={isProcessing}
              aria-label="Purchase AI Credits"
            >
              <div className="flex flex-col items-center">
                <span className="text-2xl">🧠</span>
                <span>AI Credits</span>
              </div>
            </Button>
          </div>
        </CardBody>
      </Card>

      <Modal isOpen={visible} onClose={() => setVisible(false)} size="md">
        <ModalContent>
          <ModalHeader>
            {paymentType === 'tip' ? 'Support Creator' : 
             paymentType === 'product' ? 'Purchase Product' : 
             paymentType === 'subscription' ? 'Upgrade Plan' : 'Purchase AI Credits'}
          </ModalHeader>
          <ModalBody>
            {paymentType === 'credits' ? (
              <div className="space-y-4">
                <h4 className="font-medium">Buy AI Credits</h4>
                <div className="grid grid-cols-3 gap-3">
                  {[100, 500, 1000].map(amount => (
                    <Card 
                      key={amount}
                      isPressable
                      isHoverable
                      className={`border-2 ${creditsAmount === amount ? 'border-primary' : 'border-transparent'}`}
                      onClick={() => setCreditsAmount(amount)}
                      aria-label={`Purchase ${amount} credits for $${(amount * AI_CREDIT_COST).toFixed(2)}`}
                    >
                      <CardBody className="text-center p-4">
                        <div className="font-bold text-lg">{amount} credits</div>
                        <div className="text-primary font-semibold">${(amount * AI_CREDIT_COST).toFixed(2)}</div>
                      </CardBody>
                    </Card>
                  ))}
                </div>
                <Button 
                  color="primary" 
                  className="w-full mt-2"
                  onClick={handleCreditPurchase}
                  isLoading={isProcessing}
                  aria-label="Confirm credit purchase"
                >
                  Purchase Now
                </Button>
              </div>
            ) : (
              <PaymentForm 
                paymentType={paymentType}
                product={product}
                onSuccess={() => {
                  setVisible(false);
                  toast.success('Payment successful!');
                }}
              />
            )}
          </ModalBody>
          <ModalFooter>
            <Button onClick={() => setVisible(false)} aria-label="Cancel payment">
              Cancel
            </Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
    </div>
  );
};

const CustomDomainSetup: React.FC<{ userId: string }> = ({ userId }) => {
  const [domain, setDomain] = useState('');
  const [loading, setLoading] = useState(false);
  const [verified, setVerified] = useState(false);
  const { canUseFeature } = useSubscription(userId);
  const [isOnline, setIsOnline] = useState(true);

  useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);
    
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  const verifyDomain = async () => {
    if (!domain) return;
    if (!isOnline) {
      toast.error('Cannot verify domain while offline');
      return;
    }
    
    setLoading(true);
    
    try {
      // Simulate domain verification
      await new Promise(resolve => setTimeout(resolve, 1500));
      setVerified(true);
      toast.success('Domain verified successfully!');
      
      // Save to localStorage
      localStorage.setItem(`bioBuilder_domain_${userId}`, domain);
    } catch (error: any) {
      toast.error('Domain verification failed');
      console.error(error);
    } finally {
      setLoading(false);
    }
  };

  if (!canUseFeature('custom_domain')) {
    return (
      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mt-4">
        <div className="flex items-start">
          <FaLock className="text-yellow-500 mt-1 mr-2" />
          <div>
            <h4 className="font-bold text-yellow-800">Custom Domains</h4>
            <p className="text-yellow-700 text-sm mt-1">
              Upgrade to Pro or Enterprise to use custom domains
            </p>
            <Button 
              color="warning" 
              size="sm" 
              className="mt-2"
              onClick={() => {/* Open upgrade modal */}}
              aria-label="Upgrade to Pro"
            >
              Upgrade Now
            </Button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="border rounded-lg p-4 mt-4">
      <h4 className="font-bold mb-3 flex items-center gap-2">
        <FiGlobe className="text-blue-500" />
        Custom Domain
      </h4>
      
      {verified ? (
        <div className="bg-green-50 border border-green-200 rounded-lg p-3">
          <div className="flex justify-between items-center">
            <span className="font-medium text-green-800">{domain}</span>
            <Badge color="success" variant="flat">Connected</Badge>
          </div>
          <p className="text-green-700 text-sm mt-2">
            Your custom domain is now active! Visit your bio at:{' '}
            <a href={`https://${domain}`} target="_blank" className="underline font-medium">
              {domain}
            </a>
          </p>
        </div>
      ) : (
        <div className="space-y-3">
          <Input
            label="Your Domain"
            placeholder="yourdomain.com"
            value={domain}
            onChange={(e) => setDomain(e.target.value)}
            description="Enter your custom domain (without https://)"
            aria-label="Enter custom domain"
          />
          <Button 
            color="primary" 
            onClick={verifyDomain}
            isLoading={loading}
            disabled={!domain.trim() || !isOnline}
            aria-label="Verify domain"
          >
            {isOnline ? 'Verify & Connect' : 'Offline - Cannot Verify'}
          </Button>
          <p className="text-xs text-gray-500 mt-2">
            Add a TXT record with 'biobuilder-verification' in your DNS settings
          </p>
        </div>
      )}
    </div>
  );
};

// ============== BLOCK COMPONENTS ==============
const TextBlock: React.FC<{
  content: string;
  onChange: (content: string) => void;
  styles?: React.CSSProperties;
}> = ({ content, onChange, styles }) => {
  return (
    <Textarea
      value={content}
      onChange={(e) => onChange(e.target.value)}
      minRows={2}
      className="w-full"
      style={styles}
      aria-label="Text content"
    />
  );
};

const ImageBlock: React.FC<{
  content: string;
  onChange: (content: string) => void;
  styles?: React.CSSProperties;
}> = ({ content, onChange, styles }) => {
  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      // Simulate upload
      const reader = new FileReader();
      reader.onload = (event) => {
        onChange(event.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  return (
    <div className="flex flex-col items-center">
      {content ? (
        <Image
          src={content}
          alt="Uploaded content"
          className="mb-3"
          style={styles}
        />
      ) : (
        <div className="bg-gray-200 border-2 border-dashed rounded-xl w-32 h-32 flex items-center justify-center mb-3" />
      )}
      <input
        type="file"
        accept="image/*"
        onChange={handleImageUpload}
        className="hidden"
        id="image-upload"
      />
      <label htmlFor="image-upload" className="cursor-pointer bg-primary-500 text-white px-4 py-2 rounded-lg">
        Upload Image
      </label>
    </div>
  );
};

const ButtonBlock: React.FC<{
  content: string;
  onChange: (content: string) => void;
  styles?: React.CSSProperties;
}> = ({ content, onChange, styles }) => {
  return (
    <div className="space-y-3">
      <Input
        label="Button Text"
        value={content}
        onChange={(e) => onChange(e.target.value)}
        aria-label="Button text"
      />
      <Input
        label="Link URL"
        placeholder="https://example.com"
        aria-label="Button link"
      />
      <Select label="Button Style" aria-label="Button style">
        <SelectItem key="primary">Primary</SelectItem>
        <SelectItem key="secondary">Secondary</SelectItem>
        <SelectItem key="outline">Outline</SelectItem>
      </Select>
    </div>
  );
};

const SocialBlock: React.FC<{
  onChange: (content: string) => void;
}> = ({ onChange }) => {
  const platforms = [
    { id: 'instagram', name: 'Instagram' },
    { id: 'twitter', name: 'Twitter' },
    { id: 'youtube', name: 'YouTube' },
    { id: 'tiktok', name: 'TikTok' },
    { id: 'linkedin', name: 'LinkedIn' },
  ];

  return (
    <div className="space-y-3">
      <h4 className="font-medium">Social Links</h4>
      {platforms.map((platform) => (
        <div key={platform.id} className="flex items-center gap-2">
          <div className="bg-gray-200 border-2 border-dashed rounded-xl w-8 h-8" />
          <Input
            placeholder={`${platform.name} URL`}
            aria-label={`${platform.name} URL`}
          />
        </div>
      ))}
    </div>
  );
};

const VideoBlock: React.FC<{
  content: string;
  onChange: (content: string) => void;
}> = ({ content, onChange }) => {
  return (
    <div className="space-y-3">
      <Input
        label="Video URL"
        placeholder="https://youtube.com/embed/..."
        value={content}
        onChange={(e) => onChange(e.target.value)}
        aria-label="Video URL"
      />
      {content && (
        <div className="aspect-video bg-gray-200 rounded-lg flex items-center justify-center">
          <p>Video Preview</p>
        </div>
      )}
    </div>
  );
};

const ProductBlock: React.FC<{
  content: string;
  onChange: (content: string) => void;
}> = ({ content, onChange }) => {
  const [product, setProduct] = useState({
    name: '',
    price: '',
    description: '',
    image: ''
  });

  useEffect(() => {
    if (content) {
      try {
        setProduct(JSON.parse(content));
      } catch {
        // Ignore
      }
    }
  }, [content]);

  const handleChange = (field: string, value: string) => {
    const updated = { ...product, [field]: value };
    setProduct(updated);
    onChange(JSON.stringify(updated));
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (event) => {
        handleChange('image', event.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  return (
    <div className="space-y-4">
      <Input
        label="Product Name"
        value={product.name}
        onChange={(e) => handleChange('name', e.target.value)}
        aria-label="Product name"
      />
      <Input
        label="Price"
        value={product.price}
        onChange={(e) => handleChange('price', e.target.value)}
        aria-label="Product price"
      />
      <Textarea
        label="Description"
        value={product.description}
        onChange={(e) => handleChange('description', e.target.value)}
        minRows={2}
        aria-label="Product description"
      />
      <div>
        <label className="block text-sm font-medium mb-1">Product Image</label>
        <div className="flex items-center gap-3">
          {product.image ? (
            <Image src={product.image} alt="Product" className="w-16 h-16 rounded-md" />
          ) : (
            <div className="bg-gray-200 border-2 border-dashed rounded-xl w-16 h-16" />
          )}
          <input
            type="file"
            accept="image/*"
            onChange={handleImageUpload}
            className="hidden"
            id="product-image-upload"
          />
          <label htmlFor="product-image-upload" className="cursor-pointer text-sm bg-gray-100 hover:bg-gray-200 px-3 py-1.5 rounded">
            Upload
          </label>
        </div>
      </div>
    </div>
  );
};

const EmailBlock: React.FC<{
  content: string;
  onChange: (content: string) => void;
}> = ({ content, onChange }) => {
  return (
    <div className="space-y-3">
      <Input
        label="Email Placeholder"
        value={content}
        onChange={(e) => onChange(e.target.value)}
        placeholder="Your email"
        aria-label="Email placeholder"
      />
      <Button color="primary">Subscribe</Button>
    </div>
  );
};

const TestimonialBlock: React.FC<{
  content: string;
  onChange: (content: string) => void;
}> = ({ content, onChange }) => {
  const [testimonial, setTestimonial] = useState({
    text: '',
    author: ''
  });

  useEffect(() => {
    if (content) {
      try {
        setTestimonial(JSON.parse(content));
      } catch {
        // Ignore
      }
    }
  }, [content]);

  const handleChange = (field: string, value: string) => {
    const updated = { ...testimonial, [field]: value };
    setTestimonial(updated);
    onChange(JSON.stringify(updated));
  };

  return (
    <div className="space-y-3">
      <Textarea
        label="Testimonial"
        value={testimonial.text}
        onChange={(e) => handleChange('text', e.target.value)}
        minRows={3}
        aria-label="Testimonial text"
      />
      <Input
        label="Author"
        value={testimonial.author}
        onChange={(e) => handleChange('author', e.target.value)}
        aria-label="Testimonial author"
      />
    </div>
  );
};

const CalendarBlock: React.FC<{
  content: string;
  onChange: (content: string) => void;
}> = ({ content, onChange }) => {
  const [slots, setSlots] = useState<any[]>([]);
  const [newSlot, setNewSlot] = useState({
    day: '',
    time: '',
    timezone: 'UTC'
  });

  useEffect(() => {
    if (content) {
      try {
        setSlots(JSON.parse(content));
      } catch {
        // Ignore
      }
    }
  }, [content]);

  const handleAddSlot = () => {
    if (newSlot.day && newSlot.time) {
      const updated = [...slots, newSlot];
      setSlots(updated);
      onChange(JSON.stringify(updated));
      setNewSlot({ day: '', time: '', timezone: 'UTC' });
    }
  };

  const removeSlot = (index: number) => {
    const updated = [...slots];
    updated.splice(index, 1);
    setSlots(updated);
    onChange(JSON.stringify(updated));
  };

  return (
    <div className="space-y-4">
      <h4 className="font-medium">Schedule a Meeting</h4>
      <p className="text-sm text-gray-600">Select available time slots</p>
      
      <div className="grid grid-cols-3 gap-3">
        <Select 
          label="Day" 
          value={newSlot.day}
          onChange={(e) => setNewSlot({...newSlot, day: e.target.value})}
          aria-label="Select day"
        >
          <SelectItem key="monday">Monday</SelectItem>
          <SelectItem key="tuesday">Tuesday</SelectItem>
          <SelectItem key="wednesday">Wednesday</SelectItem>
          <SelectItem key="thursday">Thursday</SelectItem>
          <SelectItem key="friday">Friday</SelectItem>
          <SelectItem key="saturday">Saturday</SelectItem>
          <SelectItem key="sunday">Sunday</SelectItem>
        </Select>
        
        <Input
          type="time"
          label="Time"
          value={newSlot.time}
          onChange={(e) => setNewSlot({...newSlot, time: e.target.value})}
          aria-label="Select time"
        />
        
        <Select
          label="Timezone"
          value={newSlot.timezone}
          onChange={(e) => setNewSlot({...newSlot, timezone: e.target.value})}
          aria-label="Select timezone"
        >
          <SelectItem key="utc">UTC</SelectItem>
          <SelectItem key="est">EST</SelectItem>
          <SelectItem key="pst">PST</SelectItem>
          <SelectItem key="cet">CET</SelectItem>
        </Select>
      </div>
      
      <Button 
        color="primary" 
        onClick={handleAddSlot}
        className="mt-2"
        aria-label="Add time slot"
      >
        Add Slot
      </Button>
      
      <div className="mt-4">
        <h5 className="font-medium mb-2">Available Time Slots</h5>
        <div className="space-y-2">
          {slots.map((slot, index) => (
            <div key={index} className="flex justify-between items-center bg-gray-50 p-2 rounded">
              <span>{slot.day} at {slot.time} ({slot.timezone})</span>
              <Button 
                isIconOnly 
                size="sm" 
                variant="light"
                onClick={() => removeSlot(index)}
                aria-label="Remove time slot"
              >
                <FaTrash className="text-danger" />
              </Button>
            </div>
          ))}
          {slots.length === 0 && (
            <p className="text-sm text-gray-500">No slots added yet</p>
          )}
        </div>
      </div>
    </div>
  );
};

const SortableBlock: React.FC<{
  block: ContentBlock;
  isActive: boolean;
  onClick: () => void;
  onUpdate: (updates: Partial<ContentBlock>) => void;
  onDelete: () => void;
  onDuplicate: () => void;
}> = ({ block, isActive, onClick, onUpdate, onDelete, onDuplicate }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [localContent, setLocalContent] = useState(block.content);
  
  const handleDoubleClick = () => {
    if (block.type === 'text') {
      setIsEditing(true);
    }
  };
  
  const handleBlur = () => {
    setIsEditing(false);
    onUpdate({ content: localContent });
  };

  const renderBlockContent = () => {
    switch (block.type) {
      case 'text':
        return isEditing ? (
          <Textarea
            autoFocus
            value={localContent}
            onChange={(e) => setLocalContent(e.target.value)}
            onBlur={handleBlur}
            className="w-full"
            minRows={3}
          />
        ) : (
          <div 
            className="prose prose-sm max-w-none" 
            dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(block.content) }}
            onClick={onClick}
            onDoubleClick={handleDoubleClick}
          />
        );
      case 'image':
        return (
          <div onClick={onClick}>
            {block.content ? (
              <Image src={block.content} alt="User content" className="w-full" />
            ) : (
              <div className="bg-gray-200 border-2 border-dashed rounded-xl w-full h-40 flex items-center justify-center">
                <span className="text-gray-500">No image</span>
              </div>
            )}
          </div>
        );
      case 'button':
        return (
          <Button color="primary" onClick={onClick} className="w-full">
            {block.content || 'Button'}
          </Button>
        );
      case 'social':
        return (
          <div className="flex justify-center gap-4 py-3" onClick={onClick}>
            {['instagram', 'twitter', 'youtube', 'tiktok', 'linkedin'].map((platform) => (
              <div key={platform} className="bg-gray-200 border-2 border-dashed rounded-xl w-8 h-8" />
            ))}
          </div>
        );
      case 'video':
        return (
          <div className="aspect-video bg-gray-200 rounded-lg flex items-center justify-center" onClick={onClick}>
            <p>Video Block</p>
          </div>
        );
      case 'product':
        try {
          const product = JSON.parse(block.content);
          return (
            <Card onClick={onClick}>
              <CardBody className="flex flex-col md:flex-row gap-4">
                {product.image ? (
                  <Image src={product.image} alt={product.name} className="w-24 h-24 object-cover rounded-lg" />
                ) : (
                  <div className="bg-gray-200 border-2 border-dashed rounded-xl w-24 h-24" />
                )}
                <div>
                  <h4 className="font-bold">{product.name || 'Product Name'}</h4>
                  <p className="text-primary font-bold">{product.price || '$0.00'}</p>
                  <p className="text-sm text-gray-600">{product.description || 'Product description'}</p>
                </div>
              </CardBody>
            </Card>
          );
        } catch {
          return (
            <Card onClick={onClick}>
              <CardBody>
                <p>Product block</p>
              </CardBody>
            </Card>
          );
        }
      case 'email':
        return (
          <Card onClick={onClick}>
            <CardBody>
              <Input placeholder="Your email" />
              <Button color="primary" className="mt-2">Subscribe</Button>
            </CardBody>
          </Card>
        );
      case 'divider':
        return <Divider onClick={onClick} className="my-4" />;
      case 'testimonial':
        try {
          const testimonial = JSON.parse(block.content);
          return (
            <Card onClick={onClick}>
              <CardBody>
                <div className="flex items-start gap-3">
                  <div className="bg-gray-200 border-2 border-dashed rounded-xl w-12 h-12" />
                  <div>
                    <p className="italic">"{testimonial.text || 'Testimonial text'}"</p>
                    <p className="font-bold mt-2">- {testimonial.author || 'Author'}</p>
                  </div>
                </div>
              </CardBody>
            </Card>
          );
        } catch {
          return (
            <Card onClick={onClick}>
              <CardBody>
                <p>Testimonial block</p>
              </CardBody>
            </Card>
          );
        }
      case 'calendar':
        try {
          const slots = JSON.parse(block.content);
          return (
            <Card onClick={onClick}>
              <CardBody>
                <h4 className="font-bold">Schedule a Meeting</h4>
                <p className="text-sm text-gray-600">Available time slots: {slots.length}</p>
                <Button color="primary" className="mt-2">View Calendar</Button>
              </CardBody>
            </Card>
          );
        } catch {
          return (
            <Card onClick={onClick}>
              <CardBody>
                <p>Calendar block</p>
              </CardBody>
            </Card>
          );
        }
      case 'referral':
        return <ReferralBlock content={block.content} onChange={(c) => onUpdate({ content: c })} />;
      default:
        return (
          <Card onClick={onClick}>
            <CardBody>
              <p>{block.type} block</p>
            </CardBody>
          </Card>
        );
    }
  };

  return (
    <Card 
      className={`mb-4 transition-all duration-200 ${isActive ? 'ring-2 ring-primary-500' : ''}`}
      isPressable
      onPress={onClick}
    >
      <CardBody>
        <div className="flex justify-between items-start">
          <div className="flex-1">
            {renderBlockContent()}
          </div>
          
          {isActive && (
            <Dropdown>
              <DropdownTrigger>
                <Button isIconOnly size="sm" variant="light">
                  <FaEllipsisV />
                </Button>
              </DropdownTrigger>
              <DropdownMenu aria-label="Block actions">
                <DropdownItem 
                  key="duplicate" 
                  startContent={<FaCopy />}
                  onClick={onDuplicate}
                >
                  Duplicate
                </DropdownItem>
                <DropdownItem 
                  key="delete" 
                  startContent={<FaTrash />}
                  className="text-danger"
                  color="danger"
                  onClick={onDelete}
                >
                  Delete
                </DropdownItem>
              </DropdownMenu>
            </Dropdown>
          )}
        </div>
      </CardBody>
    </Card>
  );
};

// ============== HELP MODAL ==============
const HelpModal: React.FC<{ isOpen: boolean; onClose: () => void }> = ({ isOpen, onClose }) => {
  const shortcuts = [
    { keys: ['Ctrl', 'Z'], action: 'Undo last action' },
    { keys: ['Ctrl', 'Y'], action: 'Redo last action' },
    { keys: ['Ctrl', 'S'], action: 'Save changes' },
    { keys: ['Ctrl', 'D'], action: 'Duplicate block' },
    { keys: ['Del'], action: 'Delete selected block' },
    { keys: ['↑', '↓'], action: 'Move block position' },
    { keys: ['Ctrl', '↑', '↓'], action: 'Move block quickly' },
  ];

  return (
    <Modal isOpen={isOpen} onClose={onClose} size="lg">
      <ModalContent>
        <ModalHeader>
          <div className="flex items-center gap-2">
            <FaKeyboard className="text-blue-500" />
            Keyboard Shortcuts
          </div>
        </ModalHeader>
        <ModalBody>
          <div className="space-y-4">
            <p className="text-gray-600">
              Work faster with these keyboard shortcuts
            </p>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {shortcuts.map((shortcut, index) => (
                <div key={index} className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
                  <div className="flex gap-1.5">
                    {shortcut.keys.map((key, i) => (
                      <Kbd key={i}>{key}</Kbd>
                    ))}
                  </div>
                  <span className="font-medium">{shortcut.action}</span>
                </div>
              ))}
            </div>
            
            <div className="mt-4 p-4 bg-blue-50 rounded-lg">
              <h4 className="font-bold mb-2 flex items-center gap-2">
                <FiHelpCircle className="text-blue-500" />
                Pro Tips
              </h4>
              <ul className="list-disc pl-5 space-y-1 text-sm text-gray-700">
                <li>Double-click on blocks to quickly edit content</li>
                <li>Use Shift+Click to select multiple blocks</li>
                <li>Press Escape to clear selection</li>
                <li>Ctrl+Click links to open in new tab</li>
              </ul>
            </div>
          </div>
        </ModalBody>
        <ModalFooter>
          <Button color="primary" onClick={onClose}>
            Close
          </Button>
        </ModalFooter>
      </ModalContent>
    </Modal>
  );
};

// ============== DEFAULT TEMPLATE ==============
const DEFAULT_TEMPLATE: ContentBlock[] = [
  {
    id: 'header',
    type: 'text',
    content: 'Welcome to my bio!',
    position: 0,
    createdAt: new Date(),
    updatedAt: new Date(),
    version: 1,
    styles: {
      fontSize: '1.5rem',
      fontWeight: 'bold',
      textAlign: 'center'
    }
  },
  {
    id: 'image',
    type: 'image',
    content: '',
    position: 1,
    createdAt: new Date(),
    updatedAt: new Date(),
    version: 1,
    styles: {
      borderRadius: '50%',
      width: '120px',
      height: '120px',
      margin: '0 auto'
    }
  },
  {
    id: 'bio',
    type: 'text',
    content: 'Digital creator | Photographer | Travel enthusiast',
    position: 2,
    createdAt: new Date(),
    updatedAt: new Date(),
    version: 1,
    styles: {
      textAlign: 'center',
      color: '#666'
    }
  },
  {
    id: 'social',
    type: 'social',
    content: '',
    config: {},
    position: 3,
    createdAt: new Date(),
    updatedAt: new Date(),
    version: 1
  }
];

// ============== ANALYTICS API ==============
const fetchAnalytics = async (userId: string) => {
  try {
    // In a real app, this would be an API call
    const mockData = {
      engagement: Math.floor(Math.random() * 5000) + 1000,
      ctr: (Math.random() * 20 + 15).toFixed(1),
      subscribers: Math.floor(Math.random() * 500) + 100,
      revenue: Math.floor(Math.random() * 1000) + 200,
      change: {
        engagement: Math.random() > 0.5 ? 'up' : 'down',
        ctr: Math.random() > 0.5 ? 'up' : 'down',
        subscribers: Math.random() > 0.5 ? 'up' : 'down',
        revenue: Math.random() > 0.5 ? 'up' : 'down',
      }
    };
    
    return mockData;
  } catch (error) {
    console.error('Failed to fetch analytics:', error);
    return null;
  }
};

// ============== AI ASSISTANT ==============
const AIAssistant: React.FC<{
  block: ContentBlock | null;
  onApply: (id: string, updates: Partial<ContentBlock>) => void;
  canUseFeature: (feature: string) => boolean;
  credits: number;
}> = ({ block, onApply, canUseFeature, credits }) => {
  const [suggestion, setSuggestion] = useState('');
  const [loading, setLoading] = useState(false);
  
  const generateSuggestion = async () => {
    if (!block || !canUseFeature('ai_suggestions')) return;
    
    setLoading(true);
    try {
      // Simulate AI request
      await new Promise(resolve => setTimeout(resolve, 1500));
      setSuggestion('This is an AI-generated suggestion to improve your content...');
    } catch (error) {
      toast.error('AI request failed');
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <Card className="bg-gradient-to-br from-purple-50 to-blue-50">
      <CardBody className="space-y-4">
        <h3 className="font-bold flex items-center gap-2">
          <div className="bg-gradient-to-r from-purple-500 to-blue-500 w-6 h-6 rounded-full flex items-center justify-center text-white">
            AI
          </div>
          AI Assistant
        </h3>
        
        <div className="flex justify-between items-center">
          <span>Credits: {credits}</span>
          <Chip color="primary" size="sm">5 credits/suggestion</Chip>
        </div>
        
        {block && (
          <div className="mt-4">
            <h4 className="font-medium mb-2">Suggestions for {block.type}</h4>
            <Select 
              label="Suggestion Type"
              defaultSelectedKeys={['improve']}
              aria-label="Select suggestion type"
            >
              <SelectItem key="improve">Improve text</SelectItem>
              <SelectItem key="generate">Generate content</SelectItem>
              <SelectItem key="grammar">Fix grammar</SelectItem>
              <SelectItem key="engaging">Make more engaging</SelectItem>
              <SelectItem key="shorten">Shorten text</SelectItem>
            </Select>
            
            <Button 
              color="primary" 
              className="w-full mt-3"
              onClick={generateSuggestion}
              isLoading={loading}
              disabled={!canUseFeature('ai_suggestions')}
            >
              Generate Suggestion
            </Button>
            
            {suggestion && (
              <div className="mt-4 p-3 bg-white rounded-lg border">
                <h5 className="font-medium mb-2">AI Suggestion</h5>
                <p className="mb-3">{suggestion}</p>
                <Button 
                  size="sm" 
                  color="success"
                  onClick={() => block && onApply(block.id, { content: suggestion })}
                >
                  Apply Suggestion
                </Button>
              </div>
            )}
          </div>
        )}
      </CardBody>
    </Card>
  );
};

// ============== MOBILE PREVIEW ==============
const MobilePreview: React.FC<{
  isOpen: boolean;
  blocks: ContentBlock[];
  onClose: () => void;
}> = ({ isOpen, blocks, onClose }) => {
  return (
    <Modal 
      isOpen={isOpen} 
      onClose={onClose} 
      size="full"
      placement="center"
      className="flex items-center justify-center"
    >
      <ModalContent>
        <ModalHeader className="flex justify-between items-center">
          Mobile Preview
          <Button isIconOnly variant="light" onClick={onClose} aria-label="Close">
            <span className="text-xl">×</span>
          </Button>
        </ModalHeader>
        <ModalBody className="flex items-center justify-center p-0">
          <div className="border-8 border-black rounded-[40px] h-[700px] w-[350px] overflow-hidden">
            <div className="h-full overflow-auto bg-white">
              {blocks.map(block => (
                <div key={block.id} className="p-4">
                  {block.type === 'text' && (
                    <div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(block.content) }} />
                  )}
                  {block.type === 'image' && block.content && (
                    <img src={block.content} alt="Preview" className="w-full rounded-lg" />
                  )}
                  {block.type === 'button' && (
                    <button className="bg-blue-500 text-white px-4 py-2 rounded">
                      {block.content || 'Button'}
                    </button>
                  )}
                  {/* Add other block types as needed */}
                </div>
              ))}
            </div>
          </div>
        </ModalBody>
      </ModalContent>
    </Modal>
  );
};

// ============== THEME CUSTOMIZER ==============
const ThemeCustomizer: React.FC<{
  onThemeChange: (theme: any) => void;
  currentTheme?: any;
}> = ({ onThemeChange, currentTheme }) => {
  const [theme, setTheme] = useState(currentTheme || {
    primaryColor: '#0072F5',
    fontFamily: 'Inter',
    borderRadius: '12px',
    backgroundColor: '#ffffff',
    textColor: '#000000'
  });
  
  const handleChange = (key: string, value: string) => {
    const updated = { ...theme, [key]: value };
    setTheme(updated);
    onThemeChange(updated);
  };
  
  return (
    <div className="space-y-4">
      <h3 className="font-bold">Theme Customization</h3>
      
      <div className="grid grid-cols-2 gap-4">
        <div>
          <label className="block text-sm mb-1">Primary Color</label>
          <input
            type="color"
            value={theme.primaryColor}
            onChange={(e) => handleChange('primaryColor', e.target.value)}
            className="w-full h-10 rounded border"
          />
        </div>
        
        <div>
          <label className="block text-sm mb-1">Background</label>
          <input
            type="color"
            value={theme.backgroundColor}
            onChange={(e) => handleChange('backgroundColor', e.target.value)}
            className="w-full h-10 rounded border"
          />
        </div>
        
        <div>
          <label className="block text-sm mb-1">Text Color</label>
          <input
            type="color"
            value={theme.textColor}
            onChange={(e) => handleChange('textColor', e.target.value)}
            className="w-full h-10 rounded border"
          />
        </div>
        
        <div>
          <label className="block text-sm mb-1">Font</label>
          <select
            value={theme.fontFamily}
            onChange={(e) => handleChange('fontFamily', e.target.value)}
            className="w-full h-10 rounded border px-2"
          >
            <option value="Inter">Inter</option>
            <option value="Roboto">Roboto</option>
            <option value="Poppins">Poppins</option>
          </select>
        </div>
      </div>
      
      <div>
        <label className="block text-sm mb-1">Border Radius</label>
        <select
          value={theme.borderRadius}
          onChange={(e) => handleChange('borderRadius', e.target.value)}
          className="w-full h-10 rounded border px-2"
        >
          <option value="4px">Small</option>
          <option value="8px">Medium</option>
          <option value="12px">Large</option>
          <option value="24px">Extra Large</option>
        </select>
      </div>
      
      <Button 
        color="primary" 
        className="w-full mt-4"
        onClick={() => onThemeChange(theme)}
      >
        Save Theme
      </Button>
    </div>
  );
};

// ============== MAIN PAGE COMPONENT ==============
export default function BioBuilderPage({ params }: { params: { id: string } }) {
  const router = useRouter();
  const { user, loading: authLoading } = useAuthStore();
  const { 
    state: { blocks, activeBlock, collaborators, templateApplied, aiCredits }, 
    addBlock, 
    updateBlock, 
    deleteBlock, 
    moveBlock,
    applyTemplate,
    saveVersion,
    restoreVersion,
    duplicateBlock,
    applyTheme,
    purchaseCredits,
    undo,
    redo,
    restoreTheme
  } = useEditor();
  const [mobilePreviewVisible, setMobilePreviewVisible] = useState(false);
  const [collaborationEnabled, setCollaborationEnabled] = useState(false);
  const [templateModalOpen, setTemplateModalOpen] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [selectedTab, setSelectedTab] = useState('blocks');
  const [activeDragId, setActiveDragId] = useState<string | null>(null);
  const [isOnline, setIsOnline] = useState(true);
  const [saveComplete, setSaveComplete] = useState(false);
  const { ref, width } = useResizeDetector();
  const { canUseFeature, usage, limits, plan } = useSubscription(user?.uid || '');
  const [runTour, setRunTour] = useState(false);
  const [analyticsData, setAnalyticsData] = useState<any>(null);
  const [helpModalOpen, setHelpModalOpen] = useState(false);
  const { theme, setTheme } = useTheme();
  
  const isMobile = width && width < 768;

  // Virtualization for large block lists
  const parentRef = React.useRef<HTMLDivElement>(null);
  const rowVirtualizer = useVirtual({
    size: blocks.length,
    parentRef,
    estimateSize: React.useCallback(() => 120, []),
    overscan: 5,
  });

  // Tour steps
  const tourSteps: Step[] = [
    {
      target: '.block-palette',
      content: "Add different content blocks to your bio page",
      placement: 'right',
      disableBeacon: true,
    },
    {
      target: '.mobile-preview',
      content: "Preview how your bio looks on mobile devices",
      placement: 'left',
    },
    {
      target: '.ai-assistant',
      content: "Get AI suggestions to improve your content",
      placement: 'top',
    },
    {
      target: '.save-button',
      content: "Save your work in progress",
      placement: 'bottom',
    },
    {
      target: '.publish-button',
      content: "Publish your bio page",
      placement: 'bottom',
    },
    {
      target: '.help-button',
      content: "Get help with keyboard shortcuts",
      placement: 'bottom',
    }
  ];

  // Handle tour completion
  const handleJoyrideCallback = (data: CallBackProps) => {
    const { status } = data;
    if ([STATUS.FINISHED, STATUS.SKIPPED].includes(status)) {
      setRunTour(false);
      localStorage.setItem('bioBuilder_tour_completed', 'true');
    }
  };

  useEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);
    
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    
    // Check if tour should run
    if (!localStorage.getItem('bioBuilder_tour_completed')) {
      setTimeout(() => setRunTour(true), 2000);
    }
    
    // Fetch analytics
    if (user?.uid) {
      fetchAnalytics(user.uid).then(data => setAnalyticsData(data));
    }
    
    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, [user?.uid]);

  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 8,
      },
    }),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );

  const handleDragStart = (event: DragStartEvent) => {
    setActiveDragId(event.active.id);
  };

  const handleDragEnd = (event: DragEndEvent) => {
    const { active, over } = event;
    
    if (over && active.id !== over.id) {
      const oldIndex = blocks.findIndex(block => block.id === active.id);
      const newIndex = blocks.findIndex(block => block.id === over.id);
      moveBlock(oldIndex, newIndex);
    }
    
    setActiveDragId(null);
  };

  const handleSave = async () => {
    if (!isOnline) {
      toast.error('Cannot save while offline. Changes stored locally.');
      return;
    }

    setIsSaving(true);
    try {
      const success = await saveVersion('manual');
      if (success) {
        toast.success('Saved successfully!');
        setSaveComplete(true);
        setTimeout(() => setSaveComplete(false), 3000);
      }
    } catch (error) {
      console.error('Save failed:', error);
      toast.error('Save failed. Please try again.');
    } finally {
      setIsSaving(false);
    }
  };

  const handlePublish = async () => {
    await handleSave();
    router.push(`/@${user?.username}`);
  };

  const copyBioLink = () => {
    const url = `https://biobuilder.app/@${user?.username}`;
    navigator.clipboard.writeText(url);
    toast.success('Link copied to clipboard!');
  };

  const exportAsHTML = () => {
    if (!user) return;
    
    const htmlContent = `
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${user.displayName}'s Bio</title>
        <style>
          body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f9fafb;
          }
          .bio-container {
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.05);
          }
          .bio-block {
            margin-bottom: 20px;
          }
        </style>
      </head>
      <body>
        <div class="bio-container">
          ${blocks.map(block => `
            <div class="bio-block" id="block-${block.id}">
              ${block.type === 'text' ? `<div>${DOMPurify.sanitize(block.content)}</div>` : ''}
              ${block.type === 'image' ? `<img src="${block.content}" alt="User content" style="max-width:100%; border-radius:8px;" />` : ''}
              <!-- Add other block types -->
            </div>
          `).join('')}
        </div>
        <div style="text-align:center; margin-top:30px; font-size:12px; color:#888;">
          Created with BioBuilder
        </div>
      </body>
      </html>
    `;
    
    const blob = new Blob([htmlContent], { type: 'text/html' });
    saveAs(blob, `${user.username}-bio.html`);
    toast.success('Exported as HTML!');
  };

  const exportAsPDF = async () => {
    if (!user) return;
    
    try {
      const element = document.getElementById('bio-preview');
      if (!element) {
        toast.error('Could not generate PDF');
        return;
      }
      
      const canvas = await html2canvas(element, { scale: 2 });
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('p', 'mm', 'a4');
      const imgWidth = 190;
      const pageHeight = 297;
      const imgHeight = canvas.height * imgWidth / canvas.width;
      let heightLeft = imgHeight;
      let position = 0;

      pdf.addImage(imgData, 'PNG', 10, 10, imgWidth, imgHeight);
      heightLeft -= pageHeight;

      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 10, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }
      
      pdf.save(`${user.username}-bio.pdf`);
      toast.success('Exported as PDF!');
    } catch (error) {
      console.error('PDF export failed:', error);
      toast.error('Failed to export PDF');
    }
  };

  const exportAsImage = async () => {
    if (!user) return;
    
    try {
      const element = document.getElementById('bio-preview');
      if (!element) {
        toast.error('Could not generate image');
        return;
      }
      
      const canvas = await html2canvas(element, { scale: 2 });
      canvas.toBlob((blob) => {
        if (blob) {
          saveAs(blob, `${user.username}-bio.png`);
          toast.success('Exported as image!');
        }
      });
    } catch (error) {
      console.error('Image export failed:', error);
      toast.error('Failed to export image');
    }
  };

  useEffect(() => {
    if (!authLoading && !user) {
      router.push('/login');
    }
  }, [user, authLoading, router]);

  if (authLoading || !user) {
    return (
      <div className="flex justify-center items-center h-screen">
        <Spinner size="lg" aria-label="Loading application..." />
      </div>
    );
  }

  return (
    <ThemeProvider attribute="class" defaultTheme="light">
      <IntlProvider locale="en" messages={messages.en}>
        <EditorProvider user={user} initialBlocks={user.bioPage || []}>
          <Joyride
            steps={tourSteps}
            run={runTour}
            continuous
            scrollToFirstStep
            showProgress
            showSkipButton
            callback={handleJoyrideCallback}
            styles={{
              options: {
                arrowColor: '#fff',
                backgroundColor: '#fff',
                overlayColor: 'rgba(0, 0, 0, 0.5)',
                primaryColor: '#0072F5',
                textColor: '#333',
                zIndex: 10000,
              },
              tooltip: {
                borderRadius: 16,
                padding: 20,
              },
              buttonNext: {
                backgroundColor: '#0072F5',
                color: '#fff',
                borderRadius: 8,
              },
            }}
          />
          
          <Toaster position="top-right" />
          <div className="flex flex-col min-h-screen bg-gray-50 dark:bg-gray-900" ref={ref}>
            {/* Screen reader announcements */}
            <div aria-live="assertive" className="sr-only">
              {isSaving ? 'Saving your content...' : saveComplete ? 'Save complete' : ''}
              {!isOnline ? 'You are offline. Changes will be saved locally.' : 'Back online. Changes will sync now.'}
            </div>

            {/* Offline indicator */}
            {!isOnline && (
              <div className="bg-yellow-500 text-white text-center py-1 text-sm">
                You are offline. Changes will be saved locally.
              </div>
            )}

            <header className="bg-white dark:bg-gray-800 border-b dark:border-gray-700 shadow-sm py-3 px-6 flex flex-wrap justify-between items-center gap-4">
              <div className="flex items-center gap-4">
                <h1 className="text-xl font-bold text-primary-600 flex items-center gap-2">
                  <span>BioBuilder</span>
                  {plan !== 'free' && (
                    <Chip color="warning" variant="flat" size="sm">
                      {plan === 'pro' ? 'PRO' : 'ENTERPRISE'}
                    </Chip>
                  )}
                </h1>
              </div>
              
              <div className="flex items-center gap-3 flex-wrap">
                <Tooltip content="Undo (Ctrl+Z)" placement="bottom">
                  <Button 
                    isIconOnly 
                    variant="flat"
                    onClick={undo}
                    aria-label="Undo"
                  >
                    <FaUndo />
                  </Button>
                </Tooltip>
                
                <Tooltip content="Redo (Ctrl+Y)" placement="bottom">
                  <Button 
                    isIconOnly 
                    variant="flat"
                    onClick={redo}
                    aria-label="Redo"
                  >
                    <FaRedo />
                  </Button>
                </Tooltip>
                
                <Popover placement="bottom">
                  <PopoverTrigger>
                    <Button variant="flat" startContent={<FaMagic />} aria-label="Templates">
                      Templates
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent>
                    <div className="p-2">
                      <Button 
                        color="primary" 
                        className="w-full mb-2"
                        onClick={() => setTemplateModalOpen(true)}
                        aria-label="Open template gallery"
                      >
                        Template Gallery
                      </Button>
                      <Button 
                        variant="flat"
                        className="w-full"
                        onClick={() => applyTemplate(DEFAULT_TEMPLATE)}
                        aria-label="Apply minimal template"
                      >
                        Apply Minimal Template
                      </Button>
                    </div>
                  </PopoverContent>
                </Popover>
                
                <Tooltip content="Mobile Preview" placement="bottom">
                  <Button 
                    isIconOnly 
                    variant="flat"
                    className="mobile-preview"
                    onClick={() => setMobilePreviewVisible(true)}
                    aria-label="Open mobile preview"
                  >
                    <FaMobile />
                  </Button>
                </Tooltip>
                
                <Tooltip content={`AI Credits: ${aiCredits}`} placement="bottom">
                  <Badge content={aiCredits} color="primary">
                    <Button isIconOnly variant="flat" className="ai-assistant" aria-label="AI Credits">
                      <div className="bg-gradient-to-r from-purple-500 to-blue-500 w-6 h-6 rounded-full flex items-center justify-center text-white text-xs">
                        AI
                      </div>
                    </Button>
                  </Badge>
                </Tooltip>
                
                <Tooltip content="Keyboard Shortcuts" placement="bottom">
                  <Button 
                    isIconOnly 
                    variant="flat" 
                    className="help-button"
                    onClick={() => setHelpModalOpen(true)}
                    aria-label="Show keyboard shortcuts"
                  >
                    <FaKeyboard />
                  </Button>
                </Tooltip>
                
                <Button 
                  color="primary"
                  className="save-button"
                  startContent={isSaving ? <Spinner size="sm" /> : <FaSave />}
                  onClick={handleSave}
                  disabled={isSaving || !isOnline}
                  aria-label={isSaving ? 'Saving in progress' : 'Save draft'}
                >
                  {isSaving ? 'Saving...' : 'Save Draft'}
                </Button>
                
                <Button 
                  color="success"
                  className="px-6 publish-button"
                  onClick={handlePublish}
                  endContent={<FiExternalLink />}
                  disabled={!isOnline}
                  aria-label="Publish bio"
                >
                  Publish Bio
                </Button>
              </div>
            </header>

            <div className="flex flex-1 overflow-hidden">
              <aside className={`w-80 border-r bg-white dark:bg-gray-800 dark:border-gray-700 p-4 flex flex-col ${isMobile ? 'hidden' : ''}`}>
                <Tabs 
                  selectedKey={selectedTab}
                  onSelectionChange={(key) => setSelectedTab(key as string)}
                  className="mb-4"
                  variant="underlined"
                  aria-label="Editor tabs"
                >
                  <Tab key="blocks" title="Blocks" />
                  <Tab key="collab" title="Collaboration" />
                  <Tab key="history" title="History" />
                  <Tab key="ai" title="AI Assistant" />
                  <Tab key="analytics" title="Analytics" />
                  <Tab key="theme" title="Theme" />
                  <Tab key="settings" title="Settings" />
                </Tabs>
                
                {selectedTab === 'blocks' && (
                  <div className="block-palette">
                    <BlockPalette 
                      onSelect={addBlock} 
                      canUseFeature={canUseFeature}
                      usage={usage}
                      limits={limits}
                    />
                  </div>
                )}
                
                {selectedTab === 'collab' && (
                  <div className="space-y-4">
                    <Switch
                      isSelected={collaborationEnabled}
                      onValueChange={setCollaborationEnabled}
                      color="success"
                      aria-label="Enable real-time collaboration"
                    >
                      Real-time Collaboration
                    </Switch>
                    
                    <Divider className="my-3" />
                    
                    <h3 className="font-medium">Collaborators</h3>
                    <ErrorBoundary FallbackComponent={ErrorFallback}>
                      <Suspense fallback={<div className="space-y-3"><Skeleton className="h-16 rounded-lg" /><Skeleton className="h-16 rounded-lg" /></div>}>
                        <CollaboratorPresence collaborators={collaborators} />
                      </Suspense>
                    </ErrorBoundary>
                  </div>
                )}
                
                {selectedTab === 'history' && (
                  <ErrorBoundary FallbackComponent={ErrorFallback}>
                    <Suspense fallback={<div className="space-y-3"><Skeleton className="h-16 rounded-lg" /><Skeleton className="h-16 rounded-lg" /></div>}>
                      <VersionHistory 
                        userId={user.uid} 
                        onRestore={restoreVersion} 
                      />
                    </Suspense>
                  </ErrorBoundary>
                )}
                
                {selectedTab === 'ai' && (
                  <ErrorBoundary FallbackComponent={ErrorFallback}>
                    <Suspense fallback={<div className="space-y-4"><Skeleton className="h-20 rounded-lg" /><Skeleton className="h-32 rounded-lg" /></div>}>
                      <AIAssistant 
                        block={activeBlock} 
                        onApply={updateBlock}
                        canUseFeature={canUseFeature}
                        credits={aiCredits}
                      />
                    </Suspense>
                  </ErrorBoundary>
                )}
                
                {selectedTab === 'analytics' && (
                  <Suspense fallback={<div className="space-y-4"><Skeleton className="h-32 rounded-lg" /><Skeleton className="h-32 rounded-lg" /></div>}>
                    <ErrorBoundary FallbackComponent={ErrorFallback}>
                      <AnalyticsDashboard userId={user.uid} />
                    </ErrorBoundary>
                  </Suspense>
                )}
                
                {selectedTab === 'theme' && (
                  <Suspense fallback={<div className="space-y-4"><Skeleton className="h-4 w-full" /><Skeleton className="h-4 w-3/4" /></div>}>
                    <ErrorBoundary FallbackComponent={ErrorFallback}>
                      <ThemeCustomizer onThemeChange={applyTheme} currentTheme={user.theme} />
                    </ErrorBoundary>
                  </Suspense>
                )}
                
                {selectedTab === 'settings' && (
                  <div className="space-y-4">
                    <h3 className="font-bold">Custom Domain</h3>
                    <ErrorBoundary FallbackComponent={ErrorFallback}>
                      <CustomDomainSetup userId={user.uid} />
                    </ErrorBoundary>
                    
                    <Divider className="my-4" />
                    
                    <h3 className="font-bold">Your Bio Link</h3>
                    <div className="flex">
                      <Input 
                        value={`https://biobuilder.app/@${user.username}`}
                        readOnly
                        className="flex-1"
                        aria-label="Your bio link"
                      />
                      <Button isIconOnly onClick={copyBioLink} aria-label="Copy bio link">
                        <FiCopy />
                      </Button>
                    </div>
                    
                    <Divider className="my-4" />
                    
                    <h3 className="font-bold">Export</h3>
                    <div className="grid grid-cols-1 gap-2">
                      <Button 
                        onClick={exportAsHTML}
                        startContent={<FiDownload />}
                        variant="bordered"
                        aria-label="Export as HTML"
                      >
                        Export as HTML
                      </Button>
                      <Button 
                        onClick={exportAsPDF}
                        startContent={<FiDownload />}
                        variant="bordered"
                        aria-label="Export as PDF"
                      >
                        Export as PDF
                      </Button>
                      <Button 
                        onClick={exportAsImage}
                        startContent={<FiDownload />}
                        variant="bordered"
                        aria-label="Export as Image"
                      >
                        Export as Image
                      </Button>
                    </div>
                  </div>
                )}
                
                <div className="mt-auto">
                  <ErrorBoundary FallbackComponent={ErrorFallback}>
                    <PaymentIntegration userId={user.uid} />
                  </ErrorBoundary>
                </div>
              </aside>

              <main className="flex-1 overflow-auto p-4 md:p-6" id="bio-preview">
                {!templateApplied && blocks.length === 0 ? (
                  <div className="flex flex-col items-center justify-center h-full text-center p-4">
                    <div className="bg-gradient-to-r from-blue-500 to-purple-500 p-2 rounded-full mb-6">
                      <div className="bg-white p-4 rounded-full">
                        <div className="w-16 h-16 bg-gray-200 border-2 border-dashed rounded-xl" />
                      </div>
                    </div>
                    <h2 className="text-2xl font-bold mb-4">Create Your Bio Page</h2>
                    <p className="text-gray-600 mb-6 max-w-md">
                      Start by adding your first content block or choose from professionally designed templates
                    </p>
                    <div className="flex gap-3 flex-wrap justify-center">
                      <Button 
                        color="primary" 
                        onClick={() => addBlock('text')} 
                        className="flex-1 min-w-[150px]"
                        aria-label="Add first block"
                      >
                        Add First Block
                      </Button>
                      <Button 
                        onClick={() => setTemplateModalOpen(true)} 
                        className="flex-1 min-w-[150px]"
                        aria-label="Choose template"
                      >
                        Choose Template
                      </Button>
                    </div>
                  </div>
                ) : (
                  <DndContext
                    sensors={sensors}
                    collisionDetection={closestCenter}
                    onDragStart={handleDragStart}
                    onDragEnd={handleDragEnd}
                    accessibility={{
                      announcements: {
                        onDragStart({ active }) {
                          return 'Dragging block';
                        },
                        onDragOver({ active, over }) {
                          if (over) {
                            return 'Drop target';
                          }
                          return;
                        },
                        onDragEnd({ active, over }) {
                          if (over) {
                            return 'Dropped item';
                          }
                          return;
                        },
                      },
                    }}
                  >
                    <SortableContext items={blocks.map(b => b.id)} strategy={verticalListSortingStrategy}>
                      <div 
                        ref={parentRef} 
                        className="relative max-w-3xl mx-auto" 
                        style={{ height: `${rowVirtualizer.totalSize}px` }}
                      >
                        {rowVirtualizer.virtualItems.map(virtualRow => {
                          const block = blocks[virtualRow.index];
                          return (
                            <div
                              key={virtualRow.key}
                              style={{
                                position: 'absolute',
                                top: 0,
                                left: 0,
                                width: '100%',
                                height: `${virtualRow.size}px`,
                                transform: `translateY(${virtualRow.start}px)`
                              }}
                            >
                              <div 
                                id={`block-${block.id}`}
                                className="relative group"
                              >
                                <SortableBlock
                                  block={block}
                                  isActive={activeBlock?.id === block.id}
                                  onClick={() => updateBlock(block.id, {})}
                                  onUpdate={(updates) => updateBlock(block.id, updates)}
                                  onDelete={() => deleteBlock(block.id)}
                                  onDuplicate={() => duplicateBlock(block.id)}
                                />
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    </SortableContext>
                    
                    <DragOverlay>
                      {activeDragId ? (
                        <Card className="opacity-80 shadow-lg" style={{ width: isMobile ? width! - 40 : 500 }}>
                          <CardBody>
                            <div className="flex items-center">
                              <div className="w-10 h-10 bg-gray-200 rounded-lg mr-3" />
                              <div>
                                <p className="font-medium">Dragging block</p>
                                <p className="text-xs text-gray-500">Move to reposition</p>
                              </div>
                            </div>
                          </CardBody>
                        </Card>
                      ) : null}
                    </DragOverlay>
                  </DndContext>
                )}
              </main>

              <aside className={`w-96 border-l bg-white dark:bg-gray-800 dark:border-gray-700 p-4 overflow-auto ${isMobile ? 'hidden' : ''}`}>
                <Suspense fallback={<Skeleton className="h-60 rounded-lg" />}>
                  <BlockConfigurator />
                </Suspense>
                <Divider className="my-4" />
                <div className="mt-4">
                  <h3 className="font-bold mb-3 flex items-center gap-2">
                    <FaChartLine className="text-primary-500" />
                    Performance Insights
                  </h3>
                  <div className="bg-gradient-to-br from-blue-50 to-purple-50 dark:from-gray-700 dark:to-gray-800 rounded-lg p-4 border border-blue-100 dark:border-gray-600">
                    <div className="grid grid-cols-2 gap-4">
                      <div className="bg-white dark:bg-gray-700 p-3 rounded-lg shadow-sm">
                        <p className="text-xs text-gray-500">Engagement</p>
                        <p className="font-bold">{analyticsData?.engagement || '1.2K'} <span className="text-green-500 text-sm">↑12%</span></p>
                      </div>
                      <div className="bg-white dark:bg-gray-700 p-3 rounded-lg shadow-sm">
                        <p className="text-xs text-gray-500">CTR</p>
                        <p className="font-bold">{analyticsData?.ctr || '24%'} <span className="text-green-500 text-sm">↑3%</span></p>
                      </div>
                      <div className="bg-white dark:bg-gray-700 p-3 rounded-lg shadow-sm">
                        <p className="text-xs text-gray-500">Subscribers</p>
                        <p className="font-bold">{analyticsData?.subscribers || '142'} <span className="text-green-500 text-sm">↑8%</span></p>
                      </div>
                      <div className="bg-white dark:bg-gray-700 p-3 rounded-lg shadow-sm">
                        <p className="text-xs text-gray-500">Revenue</p>
                        <p className="font-bold">${analyticsData?.revenue || '284'} <span className="text-green-500 text-sm">↑5%</span></p>
                      </div>
                    </div>
                    <Button 
                      color="primary" 
                      variant="light" 
                      className="w-full mt-3"
                      endContent={<FiExternalLink size={14} />}
                      aria-label="View full analytics"
                    >
                      View Full Analytics
                    </Button>
                  </div>
                </div>
              </aside>
            </div>

            {/* Mobile bottom navigation */}
            {isMobile && (
              <div className="fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-800 border-t dark:border-gray-700 flex justify-around p-2 z-50">
                <Button isIconOnly variant="light" onClick={() => setSelectedTab('blocks')} aria-label="Blocks">
                  <div className="bg-gray-200 border rounded-lg w-6 h-6" />
                </Button>
                <Button isIconOnly variant="light" onClick={() => setMobilePreviewVisible(true)} aria-label="Mobile preview">
                  <FaMobile />
                </Button>
                <Button isIconOnly variant="light" onClick={() => setSelectedTab('ai')} aria-label="AI Assistant">
                  <div className="bg-gradient-to-r from-purple-500 to-blue-500 w-6 h-6 rounded-full" />
                </Button>
                <Button 
                  isIconOnly 
                  variant="light" 
                  onClick={handleSave} 
                  disabled={isSaving || !isOnline}
                  aria-label={isSaving ? 'Saving in progress' : 'Save draft'}
                >
                  {isSaving ? <Spinner size="sm" /> : <FaSave />}
                </Button>
                <Button 
                  isIconOnly 
                  color="success" 
                  onClick={handlePublish}
                  disabled={!isOnline}
                  aria-label="Publish bio"
                >
                  <FiExternalLink />
                </Button>
              </div>
            )}

            {/* Watermark for free users */}
            {plan === 'free' && (
              <div className="fixed bottom-4 right-4 text-xs text-gray-400 bg-white/80 dark:bg-gray-800/80 px-2 py-1 rounded">
                Created with BioBuilder
              </div>
            )}
          </div>

          <Suspense fallback={<Skeleton className="h-60 rounded-lg" />}>
            <TemplateGallery 
              isOpen={templateModalOpen}
              onClose={() => setTemplateModalOpen(false)}
              onSelect={applyTemplate}
            />
          </Suspense>
          
          <Suspense fallback={<Skeleton className="h-screen rounded-lg" />}>
            <MobilePreview 
              isOpen={mobilePreviewVisible}
              blocks={blocks}
              onClose={() => setMobilePreviewVisible(false)}
            />
          </Suspense>
          
          <HelpModal 
            isOpen={helpModalOpen}
            onClose={() => setHelpModalOpen(false)}
          />
        </EditorProvider>
        <Analytics />
      </IntlProvider>
    </ThemeProvider>
  );
}
